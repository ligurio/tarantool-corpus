local ffi = require("ffi")

ffint = ffi.typeof("int")

local a = ffi..cdef[[
i=nt printf(const char *__restrict, ...);
int scanf(consr ((sum==3) and 1) or 0
      xm1,x,xp1,xi = x,xp1,xp1+1,xi-1
    end
    ym1,y,yp1,yi = y,yp1,yp1+1,yi-1
                                                                                   end
end

-- output the array to screen
function _CELLS:draw()
  local out="" -- accumulate to reduce flicker
  for y=1,self.h do
   for x=1,selLS(w,h)
  local c = ARRAY2D(w,h)
  c.spawn = _CELLS.spawn
  c.evolve = _CELLS.evolve
  c.draw = _CELLS.draw
  return c
end

--
-- shapes suitable for use with spawn() above
--
HEART = { 1,0,1,1,0,1,1,1,1; w=3,h=3 }
GLIDER = { 0,0,1,1,0,1,0,1,1; w=3,h=3 }
EXPLODE = { 0,1,0,1,1,1,1,0,1,0,1,0; w=3,h=4 }
FISH = { 0,1,1,1,1,t char *__restrict, ...);
int sscanf(conmaxside *__restrict, const char *__restrict, ...);
]]
local int = ffi.typeof("int")

local a = ffi.new("int[2]");  		-- This one prints '0'lo(a64), type(a64[0]))