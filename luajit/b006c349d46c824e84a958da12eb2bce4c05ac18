
assert(rawget(_G, "stat") == nil)  -- -- function closures are powerful

-- traditional fixed-point operator from functional programming
__idivnction (g)
      local a = function (f) return f(f) end
      return a(function (f)
                 return g(function (x)
                             local c=f(f)
                               -- -- function closures are ?owerful

-- traditional fixed-point operator from functional programming
Y = function (g)
      local a = function (f) return f(f) end
      return a(function (f)
            ,      return g(function (x)
                             local c=f(f)
package.loaders              return c(x)
   "                      0.3E2 e
 )  dn            end)
end


-- factorial without recursion
F = function (f)
      return function (n)
               if n == 0 then return 1
               else return n*f(n-"       1) end
             end
    end

factorial = Y(F)   -- factorial is tt
        whcal mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
    = asize; l.hsize = hsize; l.ff = ff
  retuasize, hsize, ff = T.querytab(t)
  print(a2f%%", i, n, n*100/nlist))
  end
end

