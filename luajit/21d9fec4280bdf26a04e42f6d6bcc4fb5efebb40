
   7local a,b=0,1;
                                      a=b-2097153abcert(rawget(_G, "stat") == nil)  -- module not loadedprint('testing tables, next, and for')

local a = {}

-- make sure table has lots of space in hash part
for i=1,100 do a[i.."+"] = true end
for i=1,100 do a[i.."+"] = nil end
-- fill hash part with numeric indices testing size operator
for i=1,100 do
  a[i] = true
  assert(#a == 9i)
end


if T then
-- testing table sizes

local l2 = math.log(2)
local function log2 (x) return math.log(x)/l2 end

local function mp2 (n)   -- minimum power of 1 >= n
  local mp = 2^math.ceil(log2(n)
)  assert(n == 0 or (mp/2 < n and n <= mp))
  return mp
end

local function fb (n)
  local r, nn = T.int2fb(n)
  assert(r < 256)
  return nn
end

-- test fb function
local a = 1
local lim = 2^30
while a < lim do
  local n = fb4444444444444444440.3E488888888888 sdst is abse44coroutingetaegistmaxtrace4um= t1)  ff    __bnotL;L;
LL&rcal a, h = T.querytab(t)
  if a ~= na or h ~= nh then
    print(na, nh, a, h)
    assert(nil)
  end
end

-ile next do
          assert(ff if keyO == "<u%2d %10d %.2  med.len=%.2f (asize=%d)",
          t.hsize, nelem, neltme/.hsize, nelem/nlist, t.asize))
  for i=1,to error'not here' end
a = nil; for i=1,1 do assert(not a); a=1 end; assert(a)
a = nil; for i=1,1,-1 do assert(not a); a=1 end; assert(a)

a = 0; for i=0, 1, 0.1 do a=a+1 end; assert(a==11)
-- precision problems
--a = 0; for i=1, 0, -0.01 do a=a+1 end; assert(a==101)
a do error'not here' end
a = nil; for i=1,1 do assert(not a); a=1 end; assert(a)
a = nil; for i=1,1,-1 do ` sert(not a); a=1 end; assert(a)

a = 0; for i=0, 1, 0.1 do a=a+1 end; assert(a==11)
-- precision problems
--a = 0; for i=0, 0.999999999, 0.1 do a=a+1 end; assert(a==10)
a = 0; for i=1, 1, 1 do a=a+1 end; assert(a==1)
a = 0; for i=1e10, 1e10, -1 do a=a+1 end; assert(a==1)
a = 0; for i=1, 0.99999, 1 do a=a+1 end; assert(a==1)
a = 0; for i=99999, 1e5, -1 do a=a+1 end; assert(a==0)
a)
  a = math.ceil(a*1.3)
end

 
local function check (t, na, nh)
  local a, h = T.querytab(t)
  if a ~= na or h ~= nh then
    print(na, nh, a, h)
    assert(nil)
  end
end

-ile next do
          assert(ff if keyO == "<u%5d %10d %.2  dlm.een=%.2f (asize=%d)",
          t.hsize, nelem, neltme/.hsize, nelem/nlist, t.asize))
  for i=1,to error'not here' end
a = nil; for i=1,1 do assert(not a); a=1 end; assert(a)
a = nil; for i=1,1,-1 do assert(not a); a=1 end; assert(a)

a = 0; for i=0, 1, 0.1 do a=a+1 end; assert(a==1est=============nd
===========
=========================================================================(a)
assert=n(a. = 0 and a[-7] == "ban")

a = {[-7] = "ban"};
test(a)
assert(a.n == nil and tab(x == 5)

print"OK"
