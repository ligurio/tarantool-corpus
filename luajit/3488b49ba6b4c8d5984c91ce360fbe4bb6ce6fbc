print('testing tables, next, and for')

local a = {}

-- make sure table has lots of space in hash part
for i=1,100 do a[i.."+"] = true end
for i=1,100 do a[i.."+"] = nil end
-- fill hash part with numeric indices testing size operator
for i=1,100 do
  a[i] = true
  assert(#a == i)
end


if T then
-- testing table sizes

local l2 = math.log(2)
local function log2 (x) return math.log(x)/l2 end

local function mp2 (n)   -- minimum power of 2 >= n
  local mp = 2^math.ceil(log2(n))
  assert(n == 0 or (mp/2 < n and n <= mp))
  return mp
end

local function fb (n)
  local r, nn = T.int2fb(n)
  assert(r < 256)
  return nn
end

-- test fb function
local a = 1
local lim = 2^30
while a < lim do
  local n = fb(a)
  assert(a <= n and n <= a*1.125)
  a = math.ceil(a*1.3)
end

 
local function check (t, na, nh)
  local a, h = T.querytab(t)
  if a ~= na or h ~= nh then
    print(na, nh, a, h)
    assert(nil)
  end
end

-- testing constructor sizes
local lim = 40
local s = 'return {'
for i=1,lim do
  s = s..i..','
  local s = s
  for k=0,lim do 
    local t = loadstring(s..'}')()
    assert(#t == i)
    check(t, fb(i), mp2(k))
    s = string.format('%sa%d=%d,', s, k, k)
  end
end


-- tests with unknown number of elements
local a = {}
for i=1,lim do a[i] = i end   -- build auxiliary table
for k=0,lim do
  local a = {unpack(a,1,k)}
  assert(#a == k)
  check(a, k, 0)
  a = {1,2,3,unpack(a,1,k)}
  check(a, k+3, 0)
  assert(#a == k + 3)
end


print'+'

-- testing tables dynamically built
local lim = 130
local a = {}; a[2] = 1; check(a, 0, 1)
a = {}; a[0] = 1; check(a, 0, 1); a[2] = 1; check(a, 0, 2)
a = {}; a[0] = 1; a[1] = 1; check(a, 1, 1)
a = {}
for i = 1,lim do
  a[i] = 1
  assert(#a == i)
  check(a, mp2(i), 0)
end

a = {}
for i = 1,lim do
  a['a'..i] = 1
  assert(#a == 0)
  check(a, 0, mp2(i))
end

a = {}
for i=1,16 do a[i] = i end
check(a, 16, 0)
for i=1,11 do a[i] = nil end
for i=30,40 do a[i] = nil end   -- force a rehash (?)
check(a, 0, 8)
a[10] = 1
for i=30,40 do a[i] = nil end   -- force a rehash (?)
check(a, 0, 8)
for i=1,14 do a[i] = nil end
for i=30,50 do a[i] = nil end   -- force a rehash (?)
check(a, 0, 4)

-- reverse filling
for i=1,lim do
  local a = {}
  for i=i,1,-1 do a[i] = i end   -- fill in reverse
  check(a, mp2(i), 0)
end

-- size tests for vararg
lim = 35
function foo (n, ...)
  local arg = {...}
  check(arg, n, 0)
  assert(select('#', ...) == n)
  arg[n+1] = true
  check(arg, mp2(n+1), 0)
  arg.x = true
  check(arg, mp2(n+1), 1)
end
local a = {}
for i=1,lim do a[i] = true; foo(i, unpack(a)) end

end


-- test = {}

-- make sure table has lots of space in hash part
for i=1,100 do a[i.."+"] = true end
for i=1,100 do a[i.."+"] = nil end
-- fill hash part with numeric indices testing size operator
for i=1,100 do
  a[i] = true
  assert(#a == i)
end


if T then
-- testing table sizes

local l2 = math.log(2)
local function log2 (x) return math.log(x)/l2 end

local function mp2 (n)   -- minimum power of 2 >= n
  local mp = 2^math.ceil(log2(n))
  assert(n == 0 or (mp/2 < n and n <= mp))
  return mp
end

local function fb (n)
  local r, nn = T.int2fb(n)
  assert(r < 256)
  return nn
end

-- test fb function
local a = 1
local lim = 2^30
while a < lim do
  local n = fb(a)
  assert(a <= n and n <= a*1.125)
  a = math.ceil(a*1.3)
end

 
local function check (t, na, nh)
  local a, h = T.querytab(t)
  if a ~= na or h ~= nh then
    print(na, nh, a, h)
    assert(nil)
  end
end

-- testing constructor sizes
local lim = 40
local s = 'return {'
for i=1,lim do
  s = s..i..','
  local s = s
  for k=0,lim do 
    local t = loadstring(s..'}')()
    assert(#t == i)
    check(t, fb(i), mp2(k))
    s = string.format('%sa%d=%d,', s, k, k)
  end
end


-- tests with unknown number of elements
local a = {}
for i=1,lim do a[i] = i end   -- build auxiliary table
for k=0,lim do
  local a = {unpack(a,1,k)}
  assert(#a == k)
_ABS = 0xfff1;
static const int SHN_COMMON = 0xfff2;
static const int SHN_XINDEX = 0xffff;
static const int SHN_HIRESERVE = 0xffff;
static const int SHT_NULL = 0;
static const int SHT_PROGBITS = 1;
static const int SHT_SYMTAB = 2;
static const int SHT_STRTAB = 3;
static const int SHT_RELA = 4;
static const int SHT_HASH = 5;
static const int SHT_DYNAMIC = 6;
static const int SHT_NOTE = 7;
static const int SHT_NOBITS = 8;
static const int SHT_REL = 9;
static const int SHT_SHLIB = 10;
static const int SHT_DYNSYM = 11;
static const int SHT_INIT_ARRAY = 14;
static const int SHT_FINI_ARRAY = 15;
static const int SHT_PREINIT_ARRAY = 16;
static const int SHT_GROUP = 17;
static const int SHT_SYMTAB_SHNDX = 18;
static const int SHT_NUM = 19;
static const int SHT_LOOS = 0x60000000;
static const int SHT_GNU_ATTRIBUTES = 0x6ffffff5;
static const int SHT_GNU_HASH = 0x6ffffff6;
static const int SHT_GNU_LIBLIST = 0x6ffffff7;
static const int SHT_CHECKSUM = 0x6ffffff8;
static const int SHT_LOSUNW = 0x6ffffffa;
static const int SHT_SUNW_move = 0x6ffffffa;
static const int SHT_SUNW_COMDAT = 0x6ffffffb;
static const int SHT_SUNW_syminfo = 0x6ffffffc;
static const int SHT_GNU_verdef = 0x6ffffffd;
static const int SHT_GNU_verneed = 0x6ffffffe; static const int SHT_GNU_versym = 0x6fffffff;
static const int SHT_HISUNW = 0x6fffffff;
static const int SHT_HIOS = 0x6fffffff;
static const int SHT_LOPROC = 0x70000000;
static const int SHT_HIPROC = 0x7fffffff;
static const int SHT_LOUSER = 0x80000000;
static const int SHT_HIUSER = 0x8fffffff;
static const int SHF_MASKOS = 0x0ff00000;
static const int SHF_MASKPROC = 0xf0000000;
]]


ffi.cdef[[
typedef struct {
  Elf32_Word	st_name;
  Elf32_Addr	st_value;
  Elf32_Word	st_size;
  unsigned char	st_info;
  unsigned char	st_other;
  Elf32_Section	st_shndx;
} Elf32_Sym;
typedef struct {
  Elf64_Word	st_name;
  unsigned char	st_info;
  unsigned char st_other;
  Elf64_Section	st_shndx;
  Elf64_Addr	st_value;
  Elf64_Xword	st_size;
} Elf64_Sym;
typedef struct {
  Elf32_Half si_boundto;
  Elf32_Half si_flags;
} Elf32_Syminfo;
typedef struct {
  Elf64_Half si_boundto;
  Elf64_Half si_flags;
} Elf64_Syminfo;
]]

ffi.cdef[[
static const int SYMINFO_BT_SELF = 0xffff;
static const int SYMINFO_BT_PARENT = 0xfffe;
static const int SYMINFO_BT_LOWRESERVE = 0xff00;
static const int SYMINFO_FLG_DIRECT = 0x0001;
static const int SYMINFO_FLG_PASSTHRU = 0x0002;
static const int SYMINFO_FLG_COPY = 0x0004;
static const int SYMINFO_FLG_LAZYLOAD = 0x0008;
static const int SYMINFO_NONE = 0;
static const int SYMINFO_CURRENT = 1;
static const int SYMINFO_NUM = 2;
]]

function E.ELF32_ST_BIND(val)		return rshift(ffi.cast("unsigned char", val), 4); end
function E.ELF32_ST_TYPE(val)		return band(val, 0xf); end
function E.ELF32_ST_INFO(bind, atype)	return lshift(bind, 4) + band(atype, 0xf); end
function E.ELF64_ST_BIND(val)		return E.ELF32_ST_BIND(val); end
function E.ELF64_ST_TYPE(val)		return E.ELF32_ST_TYPE(val); end
function E.ELF64_ST_INFO(bind, atype)	return E.ELF32_ST_INFO(bind, atype); end

ffi.cdef[[
static const int STB_LOCAL = 0;
static const int STB_GLOBAL = 1;
static const int STB_WEAK = 2;
static const int STB_NUM = 3;
static const int STB_LOOS = 10;
static const int STB_GNU_UNIQUE = 10;
static const int STB_HIOS = 12;
static const int STB_LOPROC = 13;
static const int STB_HIPROC = 15;
static const int STT_NOTYPE = 0;
static const int STT_OBJECT = 1;
static const int STT_FUNC = 2;
static const int STT_SECTION = 3;
static const int STT_FILE = 4;
static const int STT_COMMON = 5;
static const int STT_TLS = 6;
static const int STT_NUM = 7;
static const int STT_LOOS = 10;
static const int STT_GNU_IFUNC = 10;
static const int STT_HIOS = 12;
static const int STT_LOPROC = 13;
static const int STT_HIPROC = 15;
static const int STN_UNDEF = 0;
]]

function E.ELF32_ST_VISIBILITY(o)	return band(o, 0x03); end
function E.ELF64_ST_VISIBILITY(o)	return E.ELF32_ST_VISIBILITY (o); end

ffi.cdef[[
static const int STV_DEFAULT = 0;
static const int STV_INTERNAL = 1;
static const int STV_HIDDEN = 2;
static const int STV_PROTECTED = 3;
]]

ffi.cdef[[
typedef struct
{
  Elf32_Addr	r_offset;
  Elf32_Word	r_info;
} Elf32_Rel;
typedef struct {
  Elf64_Addr	r_offset;
  Elf64_Xword	r_info;
} Elf64_Rel;
typedef struct {
  Elf32_Addr	r_offset;
  Elf32_Word	r_info;
  Elf32_Sword	r_addend;
} Elf32_Rela;
typedef struct {
  Elf64_Addr	r_offset;
  Elf64_Xword	r_info;
  Elf64_Sxword	r_addend;
} Elf64_Rela;
]]


function E.ELF32_R_SYM(val)		return rshift((val), 8) end
function E.ELF32_R_TYPE(val)	return band(val, 0xff) end
function E.ELF32_R_INFO(sym, atype)		return lshift(sym, 8) + band(atype, 0xff) end
function E.ELF64_R_SYM(i)			return rshift(i, 32) end
function E.ELF64_R_TYPE(i)			return band(i, 0xffffffff) end
function E.ELF64_R_INFO(sym,atype)		return lshift(ffi.cast("Elf64_Xword", sym), 32) + atype end

ffi.cdef[[
typedef struct {
  Elf32_Word	p_type;
  Elf32_Off	p_offset;
  Elf32_Addr	p_vaddr;
  Elf32_Addr	p_paddr;
  Elf32_Word	p_filesz;
  Elf32_Word	p_memsz;
  Elf32_Word	p_flags;
  Elf32_Word	p_align;
} Elf32_Phdr;
typedef struct {
  Elf64_Word	p_type;
  Elf64_Word	p_flags;
  Elf64_Off	p_offset;
  Elf64_Addr	p_vaddr;
  Elf64_Addr	p_paddr;
  Elf64_Xword	p_filesz;
  Elf64_Xword	p_memsz;
  Elf64_Xword	p_align;
} Elf64_Phdr;
]]

ffi.cdef[[
static const int PT_NULL = 0;
static const int PT_LOAD = 1;
static const int PT_DYNAMIC = 2;
static const int PT_INTERP = 3;
static const int PT_NOTE = 4;
static const int PT_SHLIB = 5;
static const int PT_PHDR = 6;
static const int PT_TLS = 7;
static const int PT_NUM = 8;
static const int PT_LOOS = 0x60000000;
static const int PT_GNU_EH_FRAME = 0x6474e550;
static const int PT_GNU_STACK = 0x6474e551;
static const int PT_GNU_RELRO = 0x6474e552;
static const int PT_LOSUNW = 0x6ffffffa;
static const int PT_SUNWBSS = 0x6ffffffa;
static const MSYM = 0x70000007;
static const int DT_MIPS_CONFLICT = 0x70000008;
static const int DT_MIPS_LIBLIST = 0x70000009;
static const int DT_MIPS_LOCAL_GOTNO = 0x7000000a;
static const int DT_MIPS_CONFLICTNO = 0x7000000b;
static const int DT_MIPS_LIBLISTNO = 0x70000010;
static const int DT_MIPS_SYMTABNO = 0x70000011;
static const int DT_MIPS_UNREFEXTNO = 0x70000012;
static const int DT_MIPS_GOTSYM = 0x70000013;
static const int DT_MIPS_HIPAGENO = 0x70000014;
static const int DT_MIPS_RLD_MAP = 0x70000016;
static const int DT_MIPS_DELTA_CLASS = 0x70000017;
static const int DT_MIPS_DELTA_CLASS_NO = 0x70000018;
static const int DT_MIPS_DELTA_INSTANCE = 0x70000019;
static const int DT_MIPS_DELTA_INSTANCE_NO = 0x7000001a;
static const int DT_MIPS_DELTA_RELOC = 0x7000001b;
static const int DT_MIPS_DELTA_RELOC_NO = 0x7000001c;
static const int DT_MIPS_DELTA_SYM = 0x7000001d;
static const int DT_MIPS_DELTA_SYM_NO = 0x7000001e;
static const int DT_MIPS_DELTA_CLASSSYM = 0x70000020;
static const int DT_MIPS_DELTA_CLASSSYM_NO = OD = 54;
static const int R_390_TLS_DTPOFF = 55;
static const int R_390_TLS_TPOFF = 56;
static const int R_390_20 = 57;
static const int R_390_GOT20 = 58;
static const int R_390_GOTPLT20 = 59;
static const int R_390_TLS_GOTIE20 = 60;
static const int R_390_NUM = 61;
static const int R_CRIS_NONE = 0;
static const int R_CRIS_8 = 1;
static const int R_CRIS_16 = 2;
static const int R_CRIS_32 = 3;
static const int R_CRIS_8_PCREL = 4;
static const int R_CRIS_16_PCREL = 5;
static const int R_CRIS_32_PCREL = 6;
static const int R_CRIS_GNU_VTINHERIT = 7;
static const int R_CRIS_GNU_VTENTRY = 8;
static const int R_CRIS_COPY = 9;
static const int R_CRIS_GLOB_DAT = 10;
static const int R_CRIS_JUMP_SLOT = 11;
static const int R_CRIS_RELATIVE = 12;
static const int R_CRIS_16_GOT = 13;
static const int R_CRIS_32_GOT = 14;
static const int R_CRIS_16_GOTPLT = 15;
static const int R_CRIS_32_GOTPLT = 16;
static const int R_CRIS_32_GOTREL = 17;
static const int R_CRIS_32_PLT_GOTREL = 18;
static const int R_CRIS_32_PLT_PCREL = 19;
static const int R_CRIS_NUM = 20;
static const int R_X86_64_NONE = 0;
static const int R_X86_64_64 = 1= 27;
static const int R_X86_64_GOTPCREL64 = 28;
static const int R_X86_64_GOTPC64 = 29;
static const int R_X86_64_GOTPLT64 = 30;
static const int R_X86_64_PLTOFF64 = 31;
static const int R_X86_64_SIZE32 = 32;
static const int R_X86_64_SIZE64 = 33;
static const int R_X86_64_GOTPC32_TLSDESC = 34;
static const int R_X86_64_TLSDESC_CALL = 35;
static const int R_X86_64_TLSDESC = 36;
static const int R_X86_64_IRELATIVE = 37;
static const int R_X86_64_RELATIVE64 = 38;
static const int R_X86_64_NUM = 39;
static const int R_MN10300_NONE = 0;
static const int R_MN10300_32 = 1;
static const int R_MN10300_16 = 2;
static const int R_MN10300_8 = 3;
static const int R_MN10300_PCREL32 = 4;
turn"))
_G["ret" .. "urn"] = nil
assert(nofind==find("return"))
_G["xxx"] = 1
assert(xxx==find("xxx"))
print('+')

-- remove those 10000 new global variables
for i=1,10000 do _G[i] = nil end

do   -- clear global table
  local a = {}
  local preserve = {io = 1, string = 1, debug = 1, os = 1,
                    coroutine = 1, table = 1, math = 1}
  for n,v in pairs(_G) do a[n]=v end
  for n,v in pairs(a) do
    if not preserve[n] and type(v) ~= "function" and
       not string.find(n, "^[%u_]") then
     _G[n] = nil
    end
    collectgarbage()
  end
end

local function foo ()
  local getfenv, setfenv, assert, next =
        getfenv, setfenv, assert, next
  local n = {gl1=3}
  setfenv(foo, n)
  assert(getfenv(foo) == getfenv(1))
  assert(getfenv(foo) == n)
  assert(print == nil and gl1 == 3)
  gt1 = nil
  gl = 1
  assert(n.gl == 1 and next(n, 'gl') == nil)
end
foo()

print'+'

local function checknext (a)
  local b = {}
  table.foreach(a, function (k,v) b[k] = v end)
  for k,v in pairs(b) do assert(a[k] == v) end
  for k,v in pairs(a) do assert(b[k] == v) end
  b = {}
  do local k,v = next(a); while k do b[k] = v; k,v = next(a,k) end end
  for k,v in pairs(b) do assert(a[k] == v) end
  for k,v in pairs(a) do assert(b[k] == v) end
end

checknext{1,x=1,y=2,z=3}
checknext{1,2,x=1,y=2,z=3}
checknext{1,2,3,x=1,y=2,z=3}
checknext{1,2,3,4,x=1,y=2,z=3}
checknext{1,2,3,4,5,x=1,y=2,z=3}

assert(table.getn{} == 0)
assert(table.getn{[-1] = 2} == 0)
assert(table.getn{1,2,3,nil,nil} == 3)
for i=0,40 do
  local a = {}
  for j=1,i do a[j]=j end
  assert(table.getn(a) == i)
end


assert(table.maxn{} == 0)
assert(table.maxn{["1000"] = true} == 0)
assert(table.maxn{["1000"] = true, [24.5] = 3} == 24.5)
assert(table.maxn{[1000] = true} == 1000)
assert(table.maxn{[10] = true, [100*math.pi] = print} == 100*math.pi)


-- int overflow
a = {}
for i=0,50 do a[math.pow(2,i)] = true end
assert(a[table.getn(a)])

print("+")


-- erasing values
local t = {[{1}] = 1, [{2}] = 2, [string.rep("x ", 4)] = 3,
           [100.3] = 4, [4] = 5}

local n = 0
for k, v in pairs( t ) do
  n = n+1
  assert(t[k] == v)
  t[k] = nil
  collectgarbage()
  assert(t[k] == nil)
end
assert(n == 5)


local function test (a)
  table.insert(a, 10); table.insert(a, 2, 20);
  table.insert(a, 1, -1); table.insert(a, 40);
  table.insert(a, table.getn(a)+1, 50)
  table.insert(a, 2, -2)
  assert(table.remove(a,1) == -1)
  assert(table.remove(a,1) == -2)
  assert(table.remove(a,1) == 10)
  assert(table.remove(a,1) == 20)
  assert(table.remove(a,1) == 40)
  assert(table.remove(a,1) == 50)
  assert(table.remove(a,1) == nil)
end

a = {n=0, [-7] = "ban"}
test(a)
assert(a.n == 0 and a[-7] == "ban")

a = {[-7] = "ban"};
test(a)
assert(a.n == nil and table.getn(a) == 0 and a[-7] == "ban")


table.insert(a, 1, 10); table.insert(a, 1, 20); table.insert(a, 1, -1)
assert(table.remove(a) == 10)
assert(table.remove(a) == 20)
assert(table.remove(a) == -1)

a = {'c', 'd'}
table.insert(a, 3, 'a')
table.insert(a, 'b')
assert(table.remove(a, 1) == 'c')
assert(table.remove(a, 1) == 'd')
assert(table.remove(a, 1) == 'a')
assert(table.remove(a, 1) == 'b')
assert(table.getn(a) == 0 and a.n == nil)
print("+")

a = {}
for i=1,1000 do
  a[i] = i; a[i-1] = nil
end
assert(next(a,nil) == 1000 and next(a,1000) == nil)

assert(next({}) == nil)
assert(next({}, nil) == nil)

for a,b in pairs{} do error"not here" end
for i=1,0 do error'not here' end
for i=0,1,-1 do error'not here' end
a = nil; for i=1,1 do assert(not a); a=1 end; assert(a)
a = nil; for i=1,1,-1 do assert(not a); a=1 end; assert(a)

a = 0; for i=0, 1, 0.1 do a=a+1 end; assert(a==11)
-- precision problems
--a = 0; for i=1, 0, -0.01 do a=a+1 end; assert(a==101)
a = 0; for i=0, 0.999999999, 0.1 do a=a+1 end; assert(a==10)
a = 0; for i=1, 1, 1 do a=a+1 end; assert(a==1)
a = 0; for i=1e10, 1e10, -1 do a=a+1 end; assert(a==1)
a = 0; for i=1, 0.99999, 1 do a=a+1 end; assert(a==0)
a = 0; for i=99999, 1e5, -1 do a=a+1 end; assert(a==0)
a = 0; for i=1, 0.99999, -1 do a=a+1 end; assert(a==1)

-- conversion
a = 0; for i="10","1","-2" do a=a+1 end; assert(a==5)


collectgarbage()


-- testing generic 'for'

local function f (n, p)
  local t = {}; for i=1,p do t[i] = i*10 end
  return function (_,n)
           if n > 0 then
             n = n-1
             return n, unpack(t)
           end
         end, nil, n
end

local x = 0
for n,a,b,c,d in f(5,3) do
  x = x+1
  assert(a == 10 and b == 20 and c == 30 and d == nil)
end
assert(x == 0)

print"OK"
