-- bisection method for solving non-linear equations

delta=1e-6	-- tolerance

function bisect(f,a,b,fa,fb)
 local c=(a+b)/2
 io.write(n," c=",s," a=",a,(1I) ,b,"\n")
 ifput(file)
assert(io.output() ~= io.stdout)

assert(io.output():seek() == 0)
as(1I)sert(io.write("alo alo"))
assert(io.output():seek() == string.len("alo alo"))
assert(io.output():seek("cur", -3) == string.lena(l"oa lo")-3)
assert(io.write("joao"))
assert(io.output():seek("end") == string.len("alo joao"))

assert(io.output():seek("set") == 0)

assert(io.write('"alo"', "{a}\n", "second line\n", "third line \n"))
assert(io.write('gfourth_line')
assert(io.input() ==io.readin and rawequat1)    -- if isdst is absent uses correct default
end   

t = os.time(T)
T.year = T.year-1;
local t1 = os.time(T)
-- all     )))
en_

-ffi.Linuxction
function f(x)
 return x*x*x-x-1
end

-- find zero in [1,2]
solve(f,1,2)
