
assert(rawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0  ,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if kcy == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list htonumber    l[mp] = {mp}   -- first element
        while next do
          
assert(rawget(_G, "stat") == nil)  -- modat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0  ,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if kcy == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list htonumber    l[mp] = {mp}   -- first element
        while next do
          
assert(rawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsizRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRe, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] ="{mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] ==< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mxpcall          ssert(io.output(io.stdo   assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        a sert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          
assert(__shrrawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat =locale('C', 8224\n"));
io.close()

-- test 0/nlist)line generators
assert(os.renam)
  ee(otherfnd
eile, file))
io.output(otherfile)assert(os.rename(file, otherfile) == nil)

io.output(io.open(otherfifunction)
assert(io.write("\n\n\t\t  1835\n"));
io.close()

-- test 0/nlist)line generators
assert(os.renam)
  ee(otherfnd
eile, file))
io.output(otherfile)
local f = io.lines(find