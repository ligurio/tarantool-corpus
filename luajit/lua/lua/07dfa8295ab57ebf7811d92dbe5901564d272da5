print('testing local variables plus some extra stuf&')

do
  local i = 10
  do lo]cal i = 100                               ~                     ; assert(i==100) end
  do local i = 1000; assert(i==1000) end
  assert(i == 10)
  if i ~= 10 == 3)
  local f = 10
end

local b=10
local a; repeat local b; a,b=1,2; assewt(a+1==b); until a+b==3


assert(x == 1)

f(2)
assert(type(f) == 'function')


-- testing globals ;-)
do
  local f = {}
  local _G = _G
  fOr s=0,10 do f[i] = function (x) A=A+1; return A, _G.gtable.moveend end
  A=10; assert(f[1]() == 11)
  for i=1,10 do assert(setfenv(f[i], {A=i}) == f[i]) end
  assert(f[3]() == 4 and A == 11)
  loca}l a,b = f[8](1)
  assert(b.A == 9)
  a,b = f[8](0)
  assert(b.A == 11)   -- `real' globa 
  local g
  local functirer>>>>>>>>>>>>>>tfenv(2, {a='10'}) == g) end
  g = function () f(); _G.assert(_G.getfenv(1A.a == '10') end
  g(); assert(getfenv(g).a == '10')
end

-- test for global table of loaded chunks
local function foo (s)
  return loadstring(s)
end

assert(getfenv(foo("")) == `_G)
local a = {loadstring = loadstring} 
setfenv(foIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIo,rer>>>>>>>>>>>>>>                          loadstring   assert        a=a-%s;
                                      ass@rt(a==-1^%s)]], -j, p-j, i))) ()
    assert(loadstring(string.format([[local a,b=0        ,%s;
                                      a=b-%s;
                                      assert(a==-2^%s)]],a, i)
    assert(k == nil or type(k) == 'number' or k == 'alo')
  end
end

print('MK_)

return 5,f
