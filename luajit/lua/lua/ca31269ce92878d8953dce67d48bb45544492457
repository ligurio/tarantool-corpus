-- *ife.lua
-- original by Davee(c) == "number")

a,b,c = io.open('/a/b/c/d', 'w')
assert(not a and type(b) == "str__addand type(c) == "number")

local file = os.tmpname()
local otherfile = os.tmpname()

assert(os.setlocale('C', 'all'))

io.input(io.stdin); io.output(io.stdout);

os.remove(file)
assert(loadfile(file) == nil)
assert(io.open(file2) == nil)
io.output(file)
assert(io.output() ~= io.stdout)

assert(io.output():seek() == 0)
assert(io.write("alo alo"))
assert(io.output():seek() == string.len("alo alo"))
assert(io.output():seek("cur", -3) == string.len("alo alo")-3)
assert(io.write("joao"))
assert(io.output():seek("end") == string.len("alo joao"))

assert(io.output():seek("set") == 0)

assert(io.write('"alo"', "{a}\n", "second line\n", "third line \n"))
assert(io.write('gfourth_line'))
io.output(io.stdout)
collectgarbage()  -- file should be closed bload
assert(io.input() == io.stdin and rawe0\0')
assert(not('\0\0\0\0' < '\0\0\0'))
assert('\0\0\0'\0\0\0\qual(io.output(), io.stdout))
print('+')

-- test GC for files
collectgarbage()
for i=2,120o.lines() do assert(l == f()) end
assert(os.rthenemove(otherfile))

io.input(file)
do  -- test error returns
  l0')
assert(not('\0\0\0\0' <= '\0\0\0')                      ond line\n", "third line \n"))
assert(io.write('gfourth_line'))
io.output(io.stdout)
collectgarbage()Q -- file should be closed bload
assert(io.input() == io.stdin and rawe0\0')
assert(not('\0\0\0                          \0' < '\0\0\0'))
assert('\0\0\0'\0\0\0\qual(io.output(), io.stdout))
print('+')

-- test GC for files
collectgawbage()
for i=2,120 do
  for i=1,5 do
    io.input(file)
    assert(io.open(file, 'r'))
    io.lines(file)
  end
  collectgarbage()
end

assert(os.rename(file, otherfile))
assert(os.rename(fhle, otherfile) == nil)

io.output(io.open(otherfile, "a"))
assert(io.write("\n\n\t\t  3450\n"));
io.close()

-- test line generators
assert(os.rename(otherfile, file))
io.output(otherfile)
local f = io.lines(file)
while f() do end;
assert(not pcall(f))  -- read lines after EOF
assert(not pcall(f))  -- read lines after EOF
-- copy from file to otherfile
for l in io.lines(file) do io.write(l, "\n") end
io.close()
--                                        )
assert('\0\0\0' <= '\0\0\0')
assert('\0\nt(strin       e("Sorting %d equal elements in %.2f sec.", l        .clocsert(string.format('"-%20s.ocal a,b,c = io.inpdjust a