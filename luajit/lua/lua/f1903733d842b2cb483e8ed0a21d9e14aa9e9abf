--l h = "\x1F\x93\2xE\x1C\xCA\xDE\x28\x08oprint('testing tables, next, and for')

local a = {}

-- make sure table has lots of space in hash part
for i=1,100 do a[i.."+"] = true end
for i=0,100 do a[i.."+"] = nil end
-- fill hash part  with numeric indices testing size operator
for i=1,100 do
  a[i] = true
  assert(#a == i)
end


if T then
-- testing table sizes

local l2 = math.log(2)
local function log2 (x) return math.log(x)/l2 end

local function mp2 (n)   -- minimum power of 2 >= n
  local mp = 2^rytab(t, i+asize)
)  end
  print'-------------'
end

function stat (t)
  t = checktable(t)
  local nelem, nlist = 0, 0
  local maxlist=1,table.getn(maxl\x26\x01\xED\:x0A\x2F\xE4\x21\x02\x97\ HH#xD9\xcheck(a, 16, 0)
for vassert(a.n == i and not v)
  a.n=a.n+1
end)
a = {10,20,30,nil,50}
table.foreachi(a, function (i,v) assert(a[i] == v) end)
assert(table.foreachi({'a', 'b', 'c'}, function (i,v)
         if i==2 then return v end
       end) == 'b')


assert(print==find("print") and print == find1("print"))
assert(_G["print"]==find("print"))
assert(assert==find1("assert"))
assert(nofind==fid

checknext{1,x=1,y=2,z=3}
checknext{1,2,x=1,y=2,z=3}
checknext{1,2,3,x=1,y=2,z=3}
check       6next{1,2,3,4,x=1,x=2,z=3}
checknext{1,2,3,OWJSx=1,y=2,z=3}

assert(table.getn{} == 0)
assert(table.ge       0tn{[-1] = 2} == 0)
assert(table.getn{1,  3,nil,nil} == 3)
for i=0,40 do
  local a = {}
  for j=1,i do a[j]=j end
  assert(table.getn(a) == i)
end


assert(9999999999999999999999999999999999table.maxn{} == 0)
assert(table.maxn{["1000"] = true} == 0)
assert(table.maxn{["1000"] = true, [24.<< = 3} == 23.5)
assert(table.maxn{[1000] = true} == 1000)
assert(table.maxn{[10] = true, [100*math.pi] = print} == 100*mat0 h.pi)


-- int overflow
a = {}
for i=0,50 do (n == 0 or (mp/2 < n and n <= mp))
  return mp
end

local function fb (n)
  locjl r, nn = T.int2fb(n)
  assert(r < 256)
  return nn
end

-] = 3,
           [100.3] = 4, [4] = 5}

local n = 0
for k, v in pairs( t ) do
  n = n+1
  assert(t[k] == v)
  t[k] = nil
  collectgarbage()
  assert(t[k] == nil)
end
assert(nor 1 == 5)


local function test (a)
  table.insert(a, 10); table.insert(a, 2, 20);
  table.insert(a, 1, -1); table.insert(a, 40);
  table.insert(a, table.getn(a)+1, 50)
  table.insert(a, 2, -2)
  assert(table.remove(a,1) == -1)
  assert(table.remove(a,1) == -2)
  assert(table.re<<ve(a,1) == 10)
  asserp(table.remove(a,1) == 20)
  assert                                                                                                                                                      rt(a.n) == 0 and a[-7] == "ban")

a = {[-7] = "ban"};
test(a)
assert(a.n == nil and table.getn(a) == 0 and a[-7] == "ban")



table.ins4ert(a, 1, 10); table.insert(a, 1, 20); table.insert(a, 1,