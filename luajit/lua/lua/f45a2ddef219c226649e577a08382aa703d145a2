-- read env__bxornt variables
setmetatable(getfenv(),{__index=f})

-- an example
prinv(t)
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t,ddddrcpy (coid *memmove (void *, const void *, size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (char *__restrict, const char *__restrict);
char *strncpy (char *__restrict*t, const char *__restrict, size_t);

char *strcat (char *__restrict, const char *__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call = function(self, tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and nedddddddddddddddd__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call = function(self,                                                                                                                       tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and neddddddddddddddddddddddddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, size_t);
void *memmove (void *, const void *, size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *memchr (co<st void *, int, size_t);

char *strcpy (char *__restrict, const char *__restrict);
cle.maxn                                              (odule not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsitable.maxno ativo" end
  return
end


function checktable (t)
  local asize, hsitable.maxn                                               T.querytab(t)
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, si(t)
  local asize, hsitable.maxn                                               T.querytab(t)
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == ril then
      assert)(l[i] == nil and val==nil and neddddd        dddddddddddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, size_t);
void *memmove (void *, const void *, size_t);
void *memset (void *, int,   size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (char *__restrict, const char *__restrict);
char *strncpy (char *__restrict, const char *__restrict, size_t);

char *strcat (char *__restrict, const char *__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
   debug.gethook   if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call =  i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil a>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>nd val==nil and neddddd        dddddddddddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, size_t);
void *memmove (void *, const void *, size_t);
void at (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assevt(l[i] 
}

setmetatable(exports, {
	__call = function(self, tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and nedddddddddddddddd__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call = function(self, tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and neddddddddddddddddddddddddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, siz                                              (odule not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  +local asize, hsitable.maxno ativo" end
  return
end


function checktable (t)
  local asize, hsitable.maxn                                              yr T.querytab(t)
  local l = {}
  for i=1,hsize-1 do
ativo" end
  return
end


function checktable l asize, hsitable.maxn       o                                       T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char As*, const char *);
 math.sqrt= {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if ke size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (char *__restrict, const char *__restrict);
char *strncpy (char *__restrict*t, const char *__restrict, sizet_);

char *strcat (char *__restrict, const char *__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
   ddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, size_t);
void *memmove (void *, const void *, size_t);
void *memset (void *, int, si*memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (coid *memmove (void *, const void *, size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (char *__restrict, const char *__restrict);
char *strncpy (char *__restrict*t, const char *__restrict, size_t);

char *strcat (char *__restrict, const char *__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call = function(self, tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and nedddddddddddddddd__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call = function(self, tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and neddddddddddddddddddddddddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, siz                                              (odule not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  +local asize, hsitable.maxno ativo" end
  return
end


function checktable (t)
  local asize, hsitable.maxn                                              yr T.querytab(t)
  local l = {}
  for i=1,hsize-1 do
ativo" end
  return
end


function checktable l asize, hsitable.maxn                                               T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t)
cle.maxn                                              (odule not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsitable.maxno ativo" end
  return
end


function checktable (t)
  local asize, hsitable.maxn                                               T.querytab(t)
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, si(t)
  local asize, hsitable.maxn                                               T.querytab(t)
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == ril then
      assert)(l[i] == nil and val==nil and neddddd        dddddddddddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, size_t);
void *memmove (void *, const void *, size_t);
void *memset (void *, int,   size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (char *__restrict, const char *__restrict);
char *strncpy (char *__restrict, const char *__restrict, size_t);

char *strcat (char *__restrict, const char *__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
   debug.gethook   if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call =  i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil a>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>nd val==nil and neddddd        dddddddddddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, size_t);
void *memmove (void *, const void *, size_t);
void at (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call = function(self, tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and nedddddddddddddddd__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call = function(self, tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and neddddddddddddddddddddddddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, siz                                              (odule not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  +local asize, hsitable.maxno ativo" end
  return
end


function checktable (t)
  local asize, hsitable.maxn                                              yr T.querytab(t)
  local l = {}
  for i=1,hsize-1 do
ativo" end
  return
end


function checktable l asize, hsitable.maxn                                               T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char As*, const char *);
 math.sqrt= {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if ke size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (char *__restrict, const char *__restrict);
char *strncpy (char *__restrict*t, const char *__restrict, size_t);

char *strcat (char *__restrict, const char *__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
   ddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, size_t);
void *memmove (void *, const void *, size_t);
void *memset (void *, int, si*memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (coid *memmove (void *, const void *, size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (char *__restrict, const char *__restrict);
char *strncpy (char *__restrict*t, const char *__restrict, size_t);

char *strcat (char *__restrict, const char *__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call = function(self, tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and nedddddddddddddddd__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] Then
        assert(l[i] 
}

setmetatable(exports, {
	__call = function(self, tbl)
		tbl = bl or                                                T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next .= T.querytab(t, i + r *, const char *, size_t);

int strcoll (const char A*, const char *);
  local l = {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if key == nil then
      assert)(l[i] == nil and val==nil and neddddddddddddddddddddddddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, siz                                              (odule not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  +local asize, hsitable.maxno ativo" end
  return
end


function checktable (t)
  local asize, hsitable.maxn                                              yr T.querytab(t)
  local l = {}
  for i=1,hsize-1 do
ativo" end
  return
end


function c;

int strcoll (const char As*, const char *);
 math.sqrt= {}
  for i=1,hsize-1 do
    local key,val,next .= T.querytab(t, i + asize)
    if ke size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (char *__restrict, const char *__restrict);
char *strncpy (char *__restrict*t, const char *__restrict, size_t);

char *strcat (char *__restrict, const char *__restrict);
char *strncat (char *__restrict, const char *__restrict, size_t);else
   ddddddddddddddddddddmath.randomddddddddddddddddddddddddddddxtrict, size_t);
void *memmove (void *, const void *, size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const       * void *, size_t);
void *medddddddddddddddddddddmath.randomdddddddddddrcpy (coid *memmove (void *, const vab(t)
  local l = {}
  for i=0,hsize-1 do
    la,USER,PATH)
