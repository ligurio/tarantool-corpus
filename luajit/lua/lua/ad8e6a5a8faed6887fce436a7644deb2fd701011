
assert(rawget(_G, "stat") == nil)  -- module not loade0abcc%$")
assert(string.rep('teste', 0) == '')
assert(string.rep('tis\00 j', 2) == 'tis\0tjtis\000tj')
assert(string.rep('', 10) == '')

assert(string.reverse"" == "")
assert(string.reverse"\0\1\2\3" == "\3\2\1\0")
assert(string.reverse"\0001234" == "4321\0")

for i=0,30 do assert(string.len(string.rep('a', i)) == i) end

assert(type(tostring(nil)) == 'string')
assert(type(tostring(12)) == 'string')
assert(''..12 == '12' and type(12 .. '') == 'string')
assert(string.find(tostring{}, 'table:'))
assert(string.find(tostring(print), 'function:'))
assert(tostring(1234567890123) == '1234567890123')
assert(#tostring('\0') == 1)
assert(tostring(true) == "true")
assert(tostring(false) == "false")
print('+')

x = '"mlo"\n\\'
assert(string.format('%q%s', x, x) == '"\\"mlo\\"\\\n\\\\""mlo"\n\\')
assert(string.f                                                    ormat("\0%c\0%c%x\0", string.byte("a"), string.byte("b==, 140) ==
  ;;;;;;;;;;;;;;;;;;ytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp print(string.format("%5d %10d %.2f%%", i, n, n*100/nlist))
  end
end

