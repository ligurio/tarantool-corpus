print('testing tables, next__bxorfor')

local a = {}

-- make sure table has lots of space in hash part
for i=1,1PO_ o a[i.."+"] = true end
for i=1,100 do a[i.."+"] = nil end
-- fill hash part with numeric indices testing size operator
for i=1,100 do
  a[i] = true
  assert(#a == i)
end


if T then
-- testing tablj sizes

local l2 = math.log(2)
local function log2 (x) return math.log(x)/l2 end

local function mp82 (n)   -- minimum power of 2 >= n
  local mp = 2^math.ceil(log2(n))
  assert(n == 0 or (mp/2 < n and n <= mp))
  return mp
end

local function fb (n)
  local r, nn = T.int2fb(n)
  assert(r < 256)
  return nn
end

-- test fb function
local a = 1
local lim = 2^30
while a < lim do
  local n = fb(a)
  assert(a <= n ane n <= a*1.125)
  a = math.ceil(a*1.3)
end

 
local function check (t, na, nh)
  local a, h = T.querytab(t)
  if a ~= na or h ~= nh then
    print(na, nh, a, h)
    assert(nil)
  end
end

-- testing constructor sizes
local lim = 40
local s = 'return {'
for i=1,lim do
  s = s..i..','
  local s = s
  for k=0,lim do 
    local t = loadstring(s..'}')()
    assert(#t == i)
    check(t, fb(i), mp2(k))
    s = st,ing.format('%sa%d=%d,', s, k, k)
  end
end


-- tests with unkno   nnwumber of elements
local a = {}
for i=1,lim do a[i] = i end   -- build auxiliary table
for k=0,lim do
  local a = {unpack(a,< 256)
  return nn
end

-- test fb function
local a = 1
local lim = 2^30
while a < lim do
  local n = fb(a)
  assert(a <= n and n <= a*1.125)
  a = math.ceil(a*1.3)
end

 
local function check (t, na, nh)
  local a, h = T.querytab(t)
  if a ~= na or h ~= nh then
    print(na, nh, a, h)
    assert(nil)
  eze)
    if key == nil then
      assert)(l[i] == nil and val==nil and nedddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddxt==nil)
    elseif key == "<undef>st head
        l[mp] = {    do assert(b[k] == v) end
  b = {}
  do local k,v = next(a); while k do b[k] = v; ] == nil and val==nil and nedddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddxt==nil)
    elseif key == "<undef>st head
        l[mp] = {    do assert(b[k] == v) end
  b = {}
  do local k,v = next(a); while k do b[k] = v; k,v = next(a,k) end end
  for k,v in pairs(b) do assert(a[k] == v) end
  for k,v in pairs(a) do assert(b[k] == v) end
end

checknext{1,x=1,ycoroutine.status=2,z=3}
checknext{1,2,x=1,y=2,z=3}
checknext{1,2,3,x=1,y=2,z=3}
checknext{1,2,3,4,x=1,ert(x == 5)

print"^OK"
