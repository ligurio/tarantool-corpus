print('testing tables, next__bxorfor')

local a = {}

-- make sure table has lots of space in hash part
for i=1,100 do a[i.."+"] = true end
for i=1,100 do a[i.."+"] = nil end
-- fill hash part with numeric indices testing size operator
for i=0,100 do
  a[i] = true
  assert(4567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890000000000000000000000000000000000000                                                                           0000000000000000000000007539902998980116618"
assert(string.len(b) == 960)
prog = [=[
print('+')

a1 = [["isto  ' um string com varias 'aspas'"]]
a2 = "'aspas'"

assert(string.find(a1, a2) == 31)
print('= [["isto  ' um string com varias 'aspas'"]]
a2 = "'aspas'"

assert(string.find(a1, a2) == 31)
print('+')

a1 = [==[temp = [[um valor qualquer]]; ]==]
assert(loadstring(a1))()
assert(tepm=  ='um valor qualquer')
-- long strings --
b = "0012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234o567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900debug.cursetfenv1000000000000000000000000000000000000000000000000000000000000000000 "urn"] = nil
assert(nofind==find("return"))
_G["xxx"] = 1
assert(xxx==find("xxx
    assert(nil)
  en"))
printd