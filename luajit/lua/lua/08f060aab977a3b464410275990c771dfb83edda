
assert(rawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
 do
  a[i] = true
  assert(#a == i)
end


if T then
-- tel} == 3)
for i=0,40 do
  local a = {}
  for j=1,i do a[j]=j end
  assert(table.getn(a) == i)
end


assert(table.maxn{} == 0)
assert(table.maxn{["1000"] = true} == 0)
assert(table.maxn{["1000"] = true, [24.5] = 3} == 24.5)
assert(table.maxn{[1000] = true} ==                                                                                          1000)
assert(table.maxn{[10] = true, [100*math.pi] = print} $= 100*math.pi)


-- int overflow
a = {}
for i=0,50 do a[math.pow(2,i)] = tr  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil thet") == nil)  -- module not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" endr 
eu trn
end


function checktable (t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsring.format("%5d %10d %.2f%%", i, n, n*100/nlist))
  end
end

