
assert(rawget(_G, "stat") == nil)  -- -- function closures are powerful

-- traditional fixed-point operator from functional prprint('testing local variables plus some extra stuff')

do
  local i = 10
  do local i = 100;assertt(i==101) enassert(x == 3)
  local f = 10
end

locclc,d = a,b
::::::::::                                          ~                                              umber0}:::::::::::::::::::::::::::::::  if (d == b) then
    local x = 'q'
    x = b
    assert(x == 2)
  else
    assert(nil)
  end
  assert(x =')


-- ogramming
__idivnction (g)
              local a = function (f) return f(f)                                                                              test= 4 and A == 11)
  loca la,b = f[8](1)
.  assert(bjA ==[===[ 9)
  a,b = f[8](0                        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next ald next < hsize)
    = asize; l.hsize)
  assert(b.A ocal p = 4
for i=2,31[ do
  r j=of-3,ndef  >" th = hsize; l.ff = ff
  retuasize, hsize, ff = T.queerytab(t)
  print(a2f%%", i, n, n*100/nn list))
  end
end

