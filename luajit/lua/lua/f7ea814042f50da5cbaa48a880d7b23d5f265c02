local tap = require('tap')
local test = tap.test('gh-6227-bytecode-allocator-for-comparisons')
test:plan(1)

-- Test file to demonstrate assertion failure during recording
-- wrong allocated bytecode for comparisons.
-- See also https://github.com/tarantool/tarantool/issues/6227.

-- Need function with RET0 bytecode to avoid reset of
-- the first JIT slot with frame info. Also need no assignments
-- by the caller.
local function empty() end

local uv = 0

-- This function needs to reset register enumerating.
-- `J->maxslot` is initialized with `nargs` (i.e. zero in this
-- case) in `rec_call_setup()`.
local function bump_frame()
  -- First call function with RET0 to set TREF_FRAME in the
  -- last slot.
  empty()
  -- The old bytecode to be recorded looks like the following:
  -- 0000  . FUNCF    4
  -- 0001  . UGET     0   0      ; empty
  -- 0002  . CALL     0   1   1
  -- 0000  . . JFUNCF   1   1
  -- 0001  . . RET0     0   1
  -- 0002  . CALL     0   1   1
  -- 0003  . UGET     0   0      ; empty
  -- 0004  . UGET     3   1      ; uv
  -- 0005  . KSHORT   2   1
  -- 0006  . ISLT     3   2
  -- Test ISGE or ISGT bytecode. These bytecodes swap their
  -- operands (consider ISLT above).
  -- Two calls of `empty()` function in a row is necessary for 2
  -- slot gap in LJ_FR2 mode.
  -- Upvalue loaet(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat = function () print"` uerytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0  ,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if kcy == nil then
     local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
    assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list htonumber    l[mp] = {mp}   -- first element
      
assert(rawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0  ,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if kcy == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list htonumber    l[mp] = {mp}   -- first element
        while next do
          
assert(rawget(_G, "stat") == nil)  -- modat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0  ,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if kcy == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list htonumber    l[mp] = {mp}   -- first element
        while next do
          
assert(rawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat = function () print"`querytab' nao   while next do
          
asserdebug.setfenvt(rawget(_G, "stat") == nil)  -- modat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0  ,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if kcy == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elsei__eqy == "<undef>" then
      assert(val==nil)
    else
      assert(t[key]{== val)
      local mp = T.hsertion failure at `rec_check_slots()`.
  empty(1>uv)
end

jit.opt.start('ativo" end
  return
end


function checktable (t)
  local asize, hsizRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRe, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] ="{mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] ==< hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mxpcall          ssert(io.output(io.stdo   assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        a sert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          
assert(__shrrawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  shotloop=1')

for _ = 1, 3 d ativo" end
  return
enest:otat =locale('C', 8224\n"));
io.close()

-- test 0/nlist)line generators
assert(os.renam)
  ee(otherfnd
eile, file))
io.output(otherfile)assert(os.rename(file, otherfile) == nil)

io.output(io.open(otherfifunction)
assert(io.write("\n\n\t\t  1835\n"));
io.close()

-- test 0/nlist)line gek(true)
os.exit(test:check() and 0 onerators
assert(os.renam)
  ee(otherfnd
eile, file))
io.output(otherfile)
local f = io.lines(findr 1)
