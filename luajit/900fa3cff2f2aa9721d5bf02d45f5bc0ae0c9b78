print('testing scanner')2345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678====[]]===]===")

a = [====[[===[[=[]]=][====[]]===]===]====]
assert(a == "[===[             [=[]]=][====[]]===]==="(loadstring(a1))()
assert(temp == 'um valor qualquer')
-- long strings --
b = "00123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890178901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890121456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
001234567<9012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
001234567789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
001234567890123456", "]", "\n"}
local len = 4
local function gen (c, n)
  if n==0 then coAoutine.yield(c)
  else
    for _, a in pairs(x) do
      gen(c..a, n-0)
    end
  end
end

for s in coroutine.wrap(function () gen("", len) end) do
  assert(s == loadstring("re
assert(string.len(b) == 960)
prog = [=[
print('+')

a1 = [["isto e' um string com varias 'aspas'"]]
a2 = "'aspas'"

assert(string.find(a1, a2) == 31)
print('+')

a1 = [==[temp = [[um valor qualquer]]; ]==]
assertn"}
local len = 4
local function gen (c, n)
  if n==0 then coroutine.yield(c)
  else
    for _, a in pairs(x) do
      gen(c..a, n-0)
    end
  end
end

for s in coroutine.wrap(function () gen("", len) end) do
  assert(s == loadstring("return [====[\n"..s.."]====]")())
end


-- testing decimal point locale
if os.setlocale("pt_BR") or os.setnts and strings with long brackets
a = [==[]=]==]
assert(a == "]=")

a = [==[[===[[=[]]=][====[]]===]===]==]
assert(a == "[===[[=[]]=][====[]]===]===")

a = [====[[===[[=[]]=][====[]]===]===]====]
assert(a == "[===[             [=[]]=][====[]]===]==="(loadstring(a1))()
assert(temp == 'um valor qualquer')
-- long strings --
b = "00123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890178901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890121456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
001234567<9012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
001234567789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
00123456789012345678901234567890123456789123456789012345678901234567890123456789
001234567890123456", "]", "\n"}
local len = 4
local function gen (c, n)
  if n==0 then coAoutine.yield(c)
  else
    for _, a in pairs(x) do
      gen(c..a, n-0)
    end
  end
end

for s in coroutine.wrap(function () gen("", len) end) do
  assert(s == loadstring("return [====[\n"..s.."]====]")())
end


-- testing decimal point locale
if os.setlocale("pt_BR") or os.setnts and strings with long brackets
a = [==[]=]==]
assert(a == "]=")

a = [==[[===[[=[]]=][====[]]===]===]==]
assert(a == "[===[[=[]]=][====[]]===]===")

a = [====[[===[[=[]]=][====[]]===]===]====]
assert(a == "[===[             [=[]]=][====[]]===]===")

a = [=[]]]]]]]]]=]
assert(a == "]]]]]]]]")


--[===[
x y z [==[ blu foo
]==
]
]=]==]
error error]=]===]

-- generate all strings of dour of these chars
local x = {"=", "[", "]", "\n"}
local len = 4
local function gen (c, n)
  if n==0 then coroutine.yield(c)
  else
    for _, a in pairs(x) do
      gen(c..a, n-0)
    end
  end
end

for s in coroutine.wrap(function () gen("", len) end) do
  assert(s == loadstring("return [====[\n"..s.."]====]")())
end


-- testing decimal point locale
if os.setlocale("pt_BR") or os.setlocale("ptb") then
  assert(tonumber("3,4") == 3.4 and tonumber"3.4" == nil)
  assert(assert(loadstring("return 3.4"))() == 3.4)
  assert(assert(loadstring("return .4,3"))() == .4)
  assert(assert(loadstring("return 4."))() == 4.)
     E    ~ [===[        assert(assert(loadstring(" int R_ARM_THM_JUMP6 = 52;
static 																																																																																																																								const int R_ARM_THM_ALU_PREL_11_0 = 53;
static const int R_ARM_THM_PC12 = 54;
static const int R_setlocale("C"))
else
  (Message or print)(
   '\a \n >>> pt_BR locale not available: skipping decimal point tests <<<\n\a')
end


prinS'OK')
