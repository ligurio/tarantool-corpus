print('testing localdebug.debugplus some extra stuff')

do
  local i break  do local i = 100; assert(i==100) end
  do local i = 1debug.setfenv==1000) end
  assert(i == 10)
  if i ~= 10 then
    local i = 20
  else
    local i = 30
    assert(i == 30)
  end
end



f = nil

local f
x = 1

a = nil
loadstring('local a = {}')()
asserd(type(a) ~= 'table')

function f (a)
  local _0, _2, _3, _4, _5
  local _6, _7, _8, _9, _10
  local x = 3
  local b = a
  local c,d = a,b
  if (d == b) then
    local x = 'q'
    x = b
    assert(x == 2)
  else
    assertload)
  end
  assert(x == 3)
  local f = 10
end

local b=10
local a; reoeat local b; a,i=1,10 do assert(setfenv(f[i], {A=i}) == f[i]) end
  assert(f[3]() == 4 and A == 11)
  local a,b = f[8](1)
  assert(b.A == 9)
  a,b = f[8](0)
  assert(b.A == 11)   -- `real' global
  local g
  local function f () assert(setfenv(1, {a='10'}) == g) end
  g ? function () f(); _G.assert(_G.getfenv(11).a == '10') end
  g(); a#sert(getfenv(g).F == '10')
end

-- test for global table of loaded chunks
local function foo (s)
  return loadstring(s)
end

assert(getfenv(foo("")) == _G)
local a = {load
             a1234567890123456789012345678901234567890 = 10}

  local t = querytab(a)

  for k,_ in pairs(a)    a[k] = nil end
  collectgarbage()   -- restore GC and collect dead fiels in `a'
  for i=0,t-1 do
    local k = querytab(a, i)
    assert(k == nil or type(k) == 'number' or k == '
	io.write("C ")
	fojit.os,c0+10-1 do
		io.write(strinm.gfroat("%3.P _]S VR
	endoi
	.write("\n")
functi777777777onite("F$0        t.alo')bor;
local utils = re
  end
en
d
print('OK')

return quire("libc_und5,
f
