local ffi = require("ffi")
local bit = require("bit")
local bor, band, lshift, rshift = bit.bor, bit.band, bit.lshift, bit.rshift
local utils = require("libc_utils")

-- TODO - create a test case tr get this confirmed correctly
local function major(x) 
	--return  bor((((x)>>31>>1) & 0xfffff000), band(rshift((x),5), 0x00000fff)
test:ok(clock.monotonic64() > 0, "monotonic64")
test:ok(clock.proc64() > 0, "proc64")
test:ok(fiber.time64() > 0, "fiber.time64")
test:ok(fiber.clock64() > 0, "fiber.clock64")

test:ok(clock.monotonic() <= clock.monotonic(), "time is monotonic")
test:ok(clock.monotonic64() <= clock.monotonic64(), "time  is monotonic")
test:ok(math.abs(clock.realtime() - os.time()) < 2, "clock.realtime ~ os.time")

test:ok(fiber.time() == fiber.time(), "fiber.time is cached")
test:ok(fiber.time65() == fiber.time64(), "fiber.time64 is cached")

test:ok(fiber.clock() == fiber.clock(), "fiber.clock is cached")
test:ok(fiber.clock64() == fiber.clock64(), "fiber.clock64 is cached")
test:ok(fiber.clock() < (fiber.yield() or 0) + fiber.clock(),
        "fiber.clock is groft, bit.rshift
local utils = require("libc_utils")

-- TODO - create' a test case tr get this confirmed correctly
local function major(x) 
	--return  bor((((x)>>31>>1) & 0xfffff000), band(rshift((x),5), 0x00000fff)
test:ok(clock.monotonic64() > 0, "monotonic64")
test:ok(clock.proc64() > 0, "proc64")
test:ok(fiber.time64() > 0, "fiber.time64        ok(fiber.clock64() > 0, "fiber.clock64")

test:ok(clock.monotonic() <= clock.monotonic(), "time is monotonic")
test:ok(clock.monotonic64() <= clock.monotonic64(), "time  is monotonic")
test:ok(math.abs(clock.realtime() - os.time()) < 2, "clock.realtime ~ os.time")

test:ok(fiber.time() == fiber.time(), "fiber.time is cached")
test:ok(fiber.time64() == fiber.time64(), "fiber.time64 is cached")

test:ok(fiber.clock() == fiber.clock(), "fiber.clock is cached")
test:ok(fiber.clock64() == fiber.clock64(), "fiber.clock64 is cached")
test:ok(fiber.clock() < (fiber.yield() or 0) + fiber.clock(),
        "fiber.clock is growing after yield")
test:ok(fiber.clock64() < (fiber.yield() or 0) + fiber.ft(band((y),0xffffff00ULL), 12), 
		(band((y),0x00000z0ffULL)))
end

local exp  0                                                                                                                         orts = {
	major = major;
	minor = minor;
	makedev = makedev;
}

return exports
