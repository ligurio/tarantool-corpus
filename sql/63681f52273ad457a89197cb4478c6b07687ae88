select {
  option: DISTINCT
  column {
    any_fallback {
    }
  }
  extra_columns {
    any_column_from_table {
      code: 0
    }
    any_fallback {
    }
  }
  extra_columns {
    any_fallback {
    }
  }
  from_clause {
    option2 {
      select_statement {
        option: DISTINCT
        column {
          any_fallback {
          }
        }
        from_clause {
          join_source_fallback {
            table_name_fallback {
              code: 0
            }
          }
        }
        from_clause_present_flag: false
        where_expr {
          expr {
            compare {
              left_operand {
                constant_fallback {
                  value: 0
                  type {
                    type_enum_fallback: BOOLEAN
                  }
                }
              }
              comporator: LESS
              right_operand {
                predicate {
                  compare {
                    left_operand {
                      constant_fallback {
                        value: 0
                        type {
                          type_enum_fallback: BOOLEAN
                        }
                      }
                    }
                    comporator: DIFFERENT
                    right_operand {
                      constant_fallback {
                        value: 0
                        type {
                          type_enum_fallback: BOOLEAN
                        }
                      }
                    }
                  }
                  bool_constant_fallback: false
                }
                constant_fallback {
                  value: 0
                  type {
                    type_enum_fallback: BOOLEAN
                  }
                }
              }
            }
            bool_constant_fallback: false
          }
        }
      }
      as_construction_present_flag: false
    }
    join_source_fallback {
      table_name_fallback {
        code: 0
      }
    }
  }
  from_clause_present_flag: false
  having_expr {
    expr {
      compare {
        left_operand {
          func {
            unary_operator_expression_fallback {
              unary_operator: IS_NOT_NULL
              term {
                constant_fallback {
                  value: 0
                  type {
                    type_enum_fallback: BOOLEAN
                  }
                }
              }
            }
          }
          constant_fallback {
            value: 0
            type {
              type_enum_fallback: BOOLEAN
            }
          }
        }
        comporator: LESS
        right_operand {
          predicate {
            compare {
              left_operand {
                constant_fallback {
                  value: 0
                  type {
                    type_enum_fallback: BOOLEAN
                  }
                }
              }
              comporator: DIFFERENT
              right_operand {
                constant_fallback {
                  value: 0
                  type {
                    type_enum_fallback: BOOLEAN
                  }
                }
              }
            }
            bool_constant_fallback: false
          }
          constant_fallback {
            value: 0
            type {
              type_enum_fallback: BOOLEAN
            }
          }
        }
      }
      bool_constant_fallback: false
    }
  }
  limit {
    limit: 0
    offset: 0
    offset_symbol_enum: COMMA
  }
}
