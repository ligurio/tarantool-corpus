select {
  option: NONE
  column {
    any_fallback {
    }
  }
  from_clause {
    join_source_fallback {
      table_name_fallback {
        code: 512
      }
    }
  }
  from_clause_present_flag: true
  where_expr {
    expr {
      compare {
        left_operand {
          func {
            unary_operator_expression_fallback {
              unary_operator: NOT
              term {
                constant_fallback {
                  value: 2199023255552
                  type {
                    type_enum_fallback: BOOLEAN
                  }
                }
              }
            }
          }
          constant_fallback {
            value: 0
            type {
              type_enum_fallback: DOUBLE
            }
          }
        }
        comporator: LESS
        right_operand {
          constant_fallback {
            value: 0
            type {
              type_enum_fallback: BOOLEAN
            }
          }
        }
      }
      bool_constant_fallback: true
    }
  }
  having_expr {
    expr {
      compare {
        left_operand {
          predicate {
            compare {
              left_operand {
                constant_fallback {
                  value: 0
                  type {
                    type_enum_fallback: BOOLEAN
                  }
                }
              }
              comporator: LESS
              right_operand {
                func {
                  unary_operator_expression_fallback {
                    unary_operator: NOT
                    term {
                      constant_fallback {
                        value: 0
                        type {
                          type_enum_fallback: DOUBLE
                        }
                      }
                    }
                  }
                }
                constant_fallback {
                  value: 0
                  type {
                    type_enum_fallback: NUMBER
                  }
                }
              }
            }
            bool_constant_fallback: true
          }
          constant_fallback {
            value: 0
            type {
              type_enum_fallback: DOUBLE
            }
          }
        }
        comporator: LESS
        right_operand {
          constant_fallback {
            value: 0
            type {
              type_enum_fallback: NUMBER
            }
          }
        }
      }
      bool_constant_fallback: false
    }
  }
}
