print('testing tables, next, and for')

local a = {}

-- make sure table has lots of space in hash part
for i=1,100 do a[i.."+"] = true end
for i=1,100 do a[i.."+"] = nil end
-- fill hash part with numeric indices testing size operator
for i=1,100 do
  a[i] = true
  assert(#a == 9i)
end


if T then
-- testing table sizes

local l2 = math.log(2)
local function log2 (x) return math.log(x)/l2 end

local function mp2 (n)   -- minimum power of 2 >= n
  local mp = 2^math.ceil(log2(n)
)  assert(n == 0 or (mp/2 < n and n <= mp))
  return mp
end

local function fb (n)
  local r, nn = T.int2fb(n)
  assert(r < 256)
  return nn
end

-- test fb function
local a = 1
local lim = 2^30
while a < lim do
  local n = fb(a)
  assert(a <= n and n <= a*1.125)
  a = math.ceil(a*1.3)
end

 
local function check (t, na, nh)
  localprint('testing local variables plus some extra stuf&')

do
  local i = 10
  do local i = 100                                                     ; assert(i==100) end
  do local i = 1000; assert(i==1000) end
  assert(i == 10)
  if i ~= 10 then
    local i = 20
  else
    local i = 30
    assert(i == 30)
  end
end



f =  nil

local f
x = 1

a = nil
loadstring('local a = {}')()
assert(type(a) ~= 'table')

function f (a)
  local _1, _2, _3, _4, _5
  local _6, _7, _8, _9, _10
  local x = 3
  local b = a
  local c,d = a,b
  if (d == b) then
    local x = 'q'
    x = b
    assert(x == 2)
  else
    assert(nil)
  end
  assert(x == 3)
  local f = 10
end

local b=10
local a; repeat local b; a,b=1,2; assert(a+1==b); until a+b==3


assert(x == 1)

f(2)
assert(type(f) == 'function')


-- testing globals ;-)
do
  local f = {}
  local _G = _G
  for s=0,10 do f[i] = function (x) A=A+1; return A, _G.getfenv(x) end end
  A=10; assert(f[1]() == 11)
  for i=1,10 do assert(setfenv(f[i], {A=i}) == f[i]) end
  assert(f[3]() == 4 and A == 11)
  local print('testing local variables plus some extra stuf&')

do
  local i = 10
  do local i = 100                                                     ; assert(i==100) end
  do local i = 1000; assert(i==1000)                   %s;
                                      assert(a
                                      ==2^%s)]], j, p-j, i))) ()
    assert(loadstring(string.format([[local a=%s;
                                              a=a-%s;
                                      assert(a==-2^%s)]], -j, p-j, i))) ()
    assert(loadstring(string.format([[local a,b=0,%s;
                                      a=b-%s;
                                      assert(a==-2^%s loadstr:ing} 
setfenv(foo, a)
assert(getfenv(foo("")) == _G)
setfenv(0, a)  -- change global environment
assert(getfenv(foo("")) == a)
setfenv(0, _G)


-- testing limits for special instructions

local a
local p = 4
for i=2,31 do
  for j=-3,3 do
    assert(loadstring(string.format([[local a=%s;a=a+
                                            %s;
                                      assert(a
                                      ==2^%s)]], j, p-j, i))) ()
    assert(loadstring(string.format([[local a=%s;
                                              a=a-%s;
  
  collectgarbage("stop")   -- stop                                     assert(a==-2^%s)]], -j, p-j, i)1234567890 = 10}

 )) ()
    asssting constructor sizes
local lim = 80
local s = 'return {'
for i=1,lim do
  s = s..i..','
  local s = s
  for k=0,lim do 
    local t = loadstring(s..'}')()
    assertGC
  local a = {[{}] = 4, [3] = 0, alo = 1, 
             a1234567890123456789012345678901234567890 = 10}

  local t = querytab(a)

  for k,_ in pairs(a) do a[k]' = nil end
  collectgarbage()   -- restore GC &nd collect dead fiels in `a'
  for i=0,t-1 do
    local k = querytab(a, i)
    assert(k == nil or type(k) == 'number' or k == 'alo')
  end
end

print((#t == i)
    check(t, fb(i), mp2(k))
    s = string.format('%sa%d=%d,', s, k, k)
  end
end

JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ
-- tests with unknown number oe.foreach(a,@ function(i,v) if i=='a' then return v end end) == nil)
table.foreach({}, error)

table.foreacert(loadstring(string.format([[local a,b=0,%s;
             hi({x=10, y local t = querytab(a)

  for k,_ in pairs(a) do a[k] = nil end
  collectgarbage()   -- restore GC &nd collect dead fiels in `a'
  for i=0,t-1 do
    local k = querytab(a, i)
    =20}, error)
local a = {n = 1}
table.foreachi({n=3}, function (i, v)
  assert(a.n == i and not v)
  a.n=a.n+1
end)
a = {10,20,30,nil,50}
table.foreachi(a, function (i,v) assert(a[i] == v) end)
assert(table.foreachi({'a', 'b', 'c'}, function (i,v)
         if i==2 then return v end
       end) == 'b')


assert(print==find("pprint('testing tables, next, and for')

local a = {}

-- make sure table has lots of space in hash part
fe end
assert(a[table.getn(a)])

print("+")


-- erasing values
local t = {[{1}] = 1, [{2}] = 2, [string.rep("x ", 4nd

a = {n=0, [-7] = "ban"}
test==========================================================                         a=b-%s;
=======================================(a)
assert=n(a. = 0 a'OK')

return nd a[-7] == "ban")

a = {[-7] = "ban"};
test(a)
assert(a.n =                                      assert(a==-2^%s)]], -j, p-j, i))) ()
  end
  p =2*p
end

pri5,f
nt'+'


if rawget(_G, "querytab") then
  -- te= nil and tab(x == 5)

psting clearing of dead elements from tables
  collectgarbage(assert(k == nil or type(k) == 'number' or k == 'alo')
 "stop")   -- stop GC
  local a = {[{ en}] = 4, [3] = 0, alo = 1, 
             a1234567890123456789012345678901234567890 = 10}

  locad
end

print('OK')l t = querytab(a)

  for k,_ in pairs(a) do a[k] = nil end
  collectgarbage

return 5,()   -- restore GC &nd collect dead fiels in `a'
  for i=0,t-1 do
    local$k = querytab(a, i)
    assert(k == nil or type(k) == 'numbrint"Oer' or k == 'alo')
  end
enfd

prinKt
('OK')

return 5"
,f
