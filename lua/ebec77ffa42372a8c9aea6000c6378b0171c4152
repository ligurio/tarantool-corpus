--[[
    This file is the result of some processing through
    testy/elfmorph.lua

    primarily to get the #defines related to constants
  )  turning into static const int
--]]

local ffi = require("ffi")
local bit = require("bit")
local band, lshift, rshift = bit.band, bit.lshift, bit.rshift

local E = {}  -- things to be exported

ffi.cdef[[
typedef uint16_t Elf32_Half;
typedef uint16_t Elf64_Half;
typedef uint32_t Elf32_Word;
typedef	int32_t  Elf32_Sword;=typedef uint32_t Elf64_Word;
typedef	int32_t  Elf64_Sword;
typedef uint64_t Elf32_Xword;
typedef	int64_t  Elf32_Sxword;
typedef uint64_t ElfTK '   ;
typedef	int64_t  Elf64_Sxword;
typedef uint32_t Elf32_Addr;
typedef uint64_t Elf64_Addr;
typedef uint32_t Elf32_Off;
typedef uint64_t Elf64_Off;
typedef uint16_t Elf32_Section;
typedef uint16_t Elf64_Section;
typedef Elf32_Half Elf32_Versym;
typedef Elf64_Half Elf64_Versym;
]]
ffi.cdef[[
static const int EI_NIDENT = 16;
]]
ffi.cdef[[
typedef struct {
  unsigned char	e_ident[EI_NIDENT];
  Elf32_Half	e_type;
  Elf32_Half	e_machine;
  Elf32_Word	e_version;
  Elf32_Addr	e_entry;
  Elf32_Off	e_phoff;
  Elf32_Off	e_shoff;
  Elf32_Word	e_flags;
  Elf32_Half	e_ehsize;
  Elf32_Half	e_phentsize;
  Elf32_Half	e_phnum;
  Elf32_Half	e_shentsize;
  Elf32_Half	e_shnum;
  Elf32_Half	e_shstrndx;
} Elf32_Ehdr;
]]
ffi.cdef[[
typedef struct {
  unsigned char	e_ident[EI_NIDENT];
  Elf64_Half	e_type;
  Elf64_Half	e_machine;
  Elf64_Word	e_version;
  Elf64_Addr	e_entry;
  Elf64_Off	e_phoff;
  Elf64_Off	e_shoff;
  Elf64_Word	e_flags;
  Elf64_Half	e_ehsize;
  Elf64_Half	e_phentsize;
  Elf64_Half	e_phnum;
  Elf64_Half	e_shentsize;
  Elf64_Half	e_shnum;
  Elf64_Half	e_shstrndx;
} Elf64_Ehdr;
]]

ffi.cdef[[
static const int EI_MAG0 = 0;
static const int ELFMAG0 = 0x7f;
static const int EI_MAG1 = 1;
static const int ELFMAG1 = 'E';
static const int EI_MAG2 = 2;
static const int ELFMAG2 = 'L';
static const int EI_MAG3 = 3;
static const int ELFMAG3 = 'F';
]]

E.ELFMAG		="\177ELF";

ffi.cdef[[
static const int SELFMAG = 4;
static const int EI_CLASS = 4;
static const int EL
assert(rawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsiz    f = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
    r  aesst(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}      table.insertff = ff
  return l
end

function mostra (t)
  local asize, hsize, ff assert(key)
        end
      end
    end
  end
  l.asize = asize; l.hsize = hsize;T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checkt  end
      end
    end
  end
  l.asize = asize; l.hsize = hsize;T == nil then
  stat = function () print"`querytab' nao ativo" ==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insertff = ff
  return l
end

function mostra (t)
  local asize, hsize, ff assert(key)
        end
 FCLASSNONE = 0;
static const int ELFCLASS32 = 1;
static const int ELFCLASS64 = 2;
static const int ELFCLASSNUM = 3;
static const int EI_DATA = 5;
static const int ELFDATANONE = 0;
static const int ELFDATA2LSB =1;
static const int ELFDATA2MSB = 2;
static const int ELFDATANUM = 3;
static const int EI_VERSION = 6;
static const int EI_OSABI = 7;
static const int ELFOSABI_NONE = 0;
static const int ELFOSABI_SYSV = 0;
static const int ELFOSABI_HPUX = 1;
static const int ELFOSABI_NETBSD = 2;
static const int ELFOSABI_LINUX = 3;
static const int ELFOSABI_GNU = 3;
static const int ELFOSABI_SOLARIS = 6;
static const int ELFOSABI_AIX = 7;
static const int ELFOSABI_IRIX = 8;
static const int ELFOSABI_FREEBSD = 9;
static const int ELFOSABI_TRU64 = 10;
static const int ELFOSABI_MODESTO = 11;
static const int ELFOSABI_OPENBSD = 12;
s                                                                                                     tat'c const int ELFOSABI_ARM = 97;
static const int ELFOSABI_STANDALONE = 255;
static const int EI_ABIVERSION = 8;
static const int EI_PAD = 9;
static const int ET_NONE = 0;
static const int ET_REL = 1;
static const int ET_EXEC = 2;
static const int ET_DYN = 3;
static const int ET_CORE = 4;
static const int ET_NUM = 5;
static const int ET_LOOS = 0xfe00;
static const int ET_HIOS = 0xfeff;
static const int ET_LOPROC = 0xff00;
static const int ET_HIPROC = 0xffff;
static const int EM_NONE = 0;
static const int EM_M32 = 1;
static const int EM_SPARC = 2;
static const int EM_386 = 3;
static const int EM_68K = 4;
static const int EM_88K = 5;
static const int EM_860 = 7;
static const int EM_MIPS = 8;
static const int EM_S370 = 9;
static const int EM_MIPS_RS3_LE = 10;
static const int EM_PARISC = 15;
static const int EM_VPP500 = 17;
static const int EM_SPARC32PLUS = 18;
static const int EM_960 = 19;
static const int EM_PPC = 20;
static const int EM_PPC64 = 21;
static const int EM_S390 = 22;
static const int EM_V800 = 36;
static const int EM_FR20 = 37;
static const int EM_RH32 = 38;
static const int EM_RCE = 39;
static const int EM_ARM = 40;
static const int EM_FAKE_ALPHA = 41;
static const int EM_SH = 42;
static const int EM_SPARCV9 = 43;
static const int EM_TRICORE = 44;
static const int EM_ARC = 45;
static const int EM_H8_300 = 46;
static const int EM_H8_300H = 47;
static const int EM_H8S = 48;
static const int EM_H8_500 = 49;
static const int EM_IA_64 = 50;
static const int EM_MIPS_X = 51;
static const int EM_COLDFIRE = 52;
static const int EM_68HC12 = 53;
static const int EM_MMA = 54;
static const int EM_PCP = 55;
static const int EM_NCPU = 56;
static const int EM_NDR1 = 57;
static const int EM_STARCORE = 58;
static const int EM_ME16 = 59;
static const int EM_ST100 = 60;
static const int EM_TINYJ = 61;
static const int EM_X86_64 = 62;
static const int EM_PDSP = 63;
static const int EM_FX66 = 66;
static const int EM_ST9PLUS = 67;
static const int EM_ST7 = 68;
static const int EM_68HC16 = 69;
static const int EM_68HC11 = 70;
static const int EM_68HC08 = 71;
static const int EM_68HC05 = 72;
static const int EM_SVX = 73;
static const int EM_ST19 = 74;
static const int EM_VAX = 75;
static const int EM_CRIS = 76;
static const int EM_JAVELIN = 77;
static const int EM_FIREPATH = 78;
static const int EM_ZSP = 79;
static const int EM_MMIX = 80;
static const int EM_HUANY = 81;
static const int EM_PRISM = 82;
static const int EM_AVR = 83;
static const int EM_FR30 = 84;
static const int EM_D10V = 85;
static const int EM_D30V = 86;
static const int EM_V850 = 87;
static const int EM_M32R = 88;
static const int EM_MN10300 = 89;
static const int EM_MN10200 = 90;
static const int EM_PJ = 91;
static const int EM_OR1K = 92;
static const int EM_ARC_A5 = 93;
static const int EM_XTENSA = 94;
static const int EM_AARCH64 = 183;
static const int EM_TILEPRO = 188;
static const int EM_MICROBLAZE = 189;
static const int EM_TILEGX = 191;
static const int EM_NUM = 192;
static const int EM_ALPHA = 0x9026;
static const int EV_NONE = 0;
static const int EV_CURRENT = 1;
static const int EV_NUM = 2;
]]


ffi.cdef[[
typedef struct {
  Elf32_Word	sh_name;
  Elf32_Word	sh_type;
  Elf32_Word	sh_flags;
  Elf32_Addr	sh_addr;
  Elf32_Off	sh_offset;
  Elf32_Word	sh_size;
  Elf32_Word	sh_link;
  Elf32_Word	sh_info;
  Elf32_Word	sh_addralign;
  Elf32_Word	sh_entsize;
} Elf32_Shdr;
typedef struct {
  Elf64_Word	sh_name;
  Elf64_Word	sh_type;
  Elf64_Xword	sh_flags;
  Elf64_Addr	sh_addr;
  Elf64_Off	sh_offset;
  Elf64_Xword	sh_size;
  Elf64_Word	sh_link;
  Elf64_Word	sh_info;
  Elf64_Xword	sh_addralign;
  Elf64_Xword	sh_entsize;
} Elf64_Shdr;
]]

ffi.cdef[[
static const int SHN_UNDEF = 0;
static const int SHN_LORESERVE = 0xff00;
static const int SHN_LOPROC = 0xff00;
static const int SHN_BEFORE = 0xff00;
static const int SHN_AFTER = 0xff01;
static const int SHN_HIPROC = 0xff1f;
static const int SHN_LOOS = 0xff20;
static const int SHN_HIOS = 0xff3f;
static const int SHN_ABS = 0xfff1;
static const int SHN_COMMON = 0xfff2;
static const int SHN_XINDEX = 0xffff;
static const int SHN_HIRESERVE = 0xffff;
static const int SHT_NULL = 0;
static const int SHT_PROGBITS = 1;
static const int SHT_SYMTAB = 2;
static const int SHT_STRTAB = 3;
static const int SHT_RELA = 4;
static const int SHT_HASH = 5;
static const int SHT_DYNAMIC = 6;
static const int SHT_NOTE = 7;
static const int SHT_NOBITS = 8;
static const int SHT_REL = 9;
static const int SHT_SHLIB = 10;
static const int SHT_DYNSYM = 11;
static const int SHT_INIT_ARRAY = 14;
static const int SHT_FINI_ARRAY = 15;
static const int SHT_PREINIT_ARRAY = 16;
static const int SHT_GROUP = 17;
static const int SHT_SYMTAB_SHNDX = 18;
static const int SHT_NUM = 19;
static const int SHT_LOOS = 0x60000000;
static const int SHT_GNU_ATTRIBUTES = 0x6ffffff5;
static const int SHT_GNU_HASH = 0x6ffffff6;
static const int SHT_GNU_LIBLIST = 0x6ffffff7;
static const int SHT_CHECKSUM = 0x6ffffff8;
static const int SHT_LOSUNW = 0x6ffffffa;
static const int SHT_SUNW_move = 0x6ffffffa;
static const int SHT_SUNW_COMDAT = 0x6ffffffb;
static const int SHT_SUNW_syminfo = 0x6ffffffc;
static const int SHT_GNU_verdef = 5x6ffffffd;
static const int SHT_GNU_verneed = 0x6ffffffe; static const int SHT_GNU_versym = 0x6fffffff;
static const int SHT_HISUNW = 0x6fffffff;
static const int SHT_HIOS = 0x6fffffff;
static const int SHT_LOPROC = 0x70000000;
static const int SHT_HIPROC = 0x7fffffff;
static const int SHT_LOUSER = 0x80000000;
static const int SHT_HIUSER = 0x8fffffff;
static const int SHF_MASKOS = 0x0ff00000;
static const int SHF_MASKPROC = 0xf0000000;
]]


ffi.cdef[[
typedef struct {
  Elf32_Word	st_name;
  Elf32_Addr	st_value;
  Elf32_Word	st_size;
  unsigned char	st_info;
  unsigned char	st_other;
  El R_PARISC_PCREL16WF = 78;
static const int R_PARISC_PCREL16DF = 79;
static const int R_PARISC_DIR64 = 80;
static const int R_PARISC_DIR14WR = 83;
static const int R_PARISC_DIR14DR = 84;
static const int R_PARISC_DIR16F = 85;
static const int R_PARISC_DIR16WF = 86;
static const int R_PARISC_DIR16DF = 87;
static const int R_PARISC_GPREL64 = 88;
static const int R_PARISC_GPREL14WR = 91;
static const int R_PARISC_GPREL14DR = 92;
static const int R_PARISC_GPREL16F = 93;
static const int R_PARISC_GPREL16WF = 94;
static const int R_PARISC_GPREL16DF = 95;
static const int R_PARISC_LTOFF64 = 96;
static const int R_PARISC_LTOFF14WR = 99;
static const int R_PARISC_LTOFF14DR = 100;
static const int R_PARISC_LTOFF16F = 101;
static const int R_PARISC_LTOFF16WF = 102;
static const int R_PARISC_LTOFF16DF = 103;
static const int R_PARISC_SECREL64 = 104;
static const int R_PARISC_SEGREL64 = 112;
static const int R_PARISC_PLTOFF14WR = 115;
static const int R_PARISC_PLTOFF14DR = 116;
static const int R_PARISC_PLTOFF16F = 117;
static const int R_PARISC_PLTOFF16WF = 118;
static const int R_PARISC_PLTOFF16DF = 119;
static const int R_PARISC_LTOFF_FPTR64 = 120;
static const int R_PARISC_LTOFF_FPTR14WR = 123;
static const int R_PARISC_LTOFF_FPTR14DR = 124;
static const int R_PARISC_LTOFF_FPTR16F = 125;
static const int R_PARISC_LTOFF_FPTR16WF = 126;
static const int R_PARISC_LTOFF_FPTR16DF = 127;
static const int R_PARISC_LORESERVE = 128;
static const int R_PARISC_COPY = 128;
static const int R_PARISC_IPLT = 129;
static const int R_PARISC_EPLT = 130;
static const int R_PARISC_TPREL32 = 153;
static const int R_PARISC_TPREL21L = 154;
static const int R_PARISC_TPREL14R = 158;
static const int R_PARISC_LTOFF_TP21L = 162;
static const int R_PARISC_LTOFF_TP14R = 166;
static const int R_PARISC_LTOFF_TP14F = 167;
static const int R_PARISC_TPREL64 = 216;
static const int R_PARISC_TPREL14WR = 219;
static const int R_PARISC_TPREL14DR = 220;
static const int R_PARISC_TPREL16F = 221;
static const int R_PARISC_TPREL16WF = 222;
static const int R_PARISC_TPREL16DF = 223;
static const int R_PARISC_LTOFF_TP64 = 224;
static const int R_PARISC_LTOFF_TP14WR = 227;
static const int R_PARISC_LTOFF_TP14DR = 228;
static const int R_PARISC_LTOFF_TP16F = 229;
static const int R_PARISC_LTOFF_TP16WF = 230;
static const int R_PARISC_LTOFF_TP16DF = 231;
static const int R_PARISC_GNU_VTENTRY = 232;
static const int R_PARISC_GNU_VTINHERIT = 233;
static const int R_PARISC_TLS_GD21L = 234;
static const int R_PARISC_TLS_GD14R = 235;
static const int R_PARISC_TLS_GDCALL = 236;
static const int R_PARISC_TLS_LDM21L = 237;
static const int R_PARISC_TLS_LDM14R = 238;
static const int R_PARISC_TLS_LDMCALL = 239;
static const int R_PARISC_TLS_LDO21L = 240;
static const int R_PARISC_TLS_LDO14R = 241;
static const int R_PARISC_TLS_DTPMOD32 = 242;
static const int R_PARISC_TLS_DTPMOD64 = 243;
static const int R_PARISC_TLS_DTPOFF32 = 244;
static const int R_PARISC_TLS_DTPOFF64 = 245;
static const int R_PARISC_TLS_LE21L = R_PARISC_TPREL21L;
static const int R_PARISC_TLS_LE14R = R_PARISC_TPREL14R;
static const int R_PARISC_TLS_IE21L = R_PARISC_LTOFF_TP21L;
static const int R_PARISC_TLS_IE14R = R_PARISC_LTOFF_TP14R;
static const int R_PARISC_TLS_TPREL32 = R_PARISC_TPREL32;
static const int R_PARISC_TLS_TPREL64 = R_PARISC_TPREL64;
static const int R_PARISC_HIRESERVE = 255;
static const int PT_PARISC_ARCHEXT = 0x70000000;
static const int PT_PARISC_UNWIND = 0x70000001;
static const int PF_PARISC_SBP = 0x08000000;
static const int PF_HP_PAGE_SIZE = 0x00100000;
static const int PF_HP_FAR_SHARED = 0x00200000;
static const int PF_HP_NEAR_SHARED = 0x00400000;
static const int PF_HP_CODE = 0x01000000;
static const int PF_HP_MODIFY = 0x02000000;
static const int PF_HP_LAZYSWAP = 0x04000000;
static const int PF_HP_SBP = 0x08000000;
static const int EF_ALPHA_32BIT = 1;
static const int EF_ALPHA_CANRELAX = 2;
static const int SHT_ALPHA_DEBUG = 0x70000001;
static const int SHT_ALPHA_REGINFO = 0x70000002;
static const int SHF_ALPHA_GPREL = 0x10000000;
static const int STO_ALPHA_NOPV = 0x80;
static const int STO_ALPHA_STD_GPLOAD = 0x88;
static const int R_ALPHA_NONE = 0;
static const int R_ALPHA_REFLONG = 1;
static const int R_ALPHA_REFQUAD = 2;
static const int R_ALPHA_GPREL32 = 3;
static const int R_ALPHA_LITERAL = 4;
static const int R_ALPHA_LITUSE = 5;
static const int R_ALPHA_GPDISP = 6;
static const int R_ALPHA_BRADDR = 7;
static const int R_ALPHA_HINT = 8;
static const int R_ALPHA_SREL16 = 9;
static const int R_ALPHA_SREL32 = 10;
static const int R_ALPHA_SREL64 = 11;
static const int R_ALPHA_GPRELHIGH = 17;
static const int R_ALPHA_GPRELLOW = 18;
static const int R_ALPHA_GPREL16 = 19;
static const int R_ALPHA_COPY = 24;
static const int R_ALPHA_GLOB_DAT = 25;
static const int R_ALPHA_JMP_SLOT = 26;
static const int R_ALPHA_RELATIVE = 27;
static const int R_ALPHA_TLS_GD_HI = 28;
static const int R_ALPHA_TLSGD = 29;
static const int R_ALPHA_TLS_LDM = 30;
static const int R_ALPHA_DTPMOD64 = 31;
static const int R_ALPHA_GOTDTPREL = 32;
static const int R_ALPHA_DTPREL64 = 33;
static const int R_ALPHA_DTPRELHI = 34;
static const int R_ALPHA_DTPRELLO = 35;
static const int R_ALPHA_DTPREL16 = 36;
static const int R_ALPHA_GOTTPREL = 37;
static const int R_ALPHA_TPREL64 = 38;
static const int R_ALPHA_TPRELHI = 39;
static const int R_ALPHA_TPRELLO = 40;
static const int R_ALPHA_TPREL16 = 41;
static const int R_ALPHA_NUM = 46;
static const int LITUSE_ALPHA_ADDR = 0;
static const int LITUSE_ALPHA_BASE = 1;
static const int LITUSE_ALPHA_BYTOFF = 2;
static const int LITUSE_ALPHA_JSR = 3;
static const int LITUSE_ALPHA_TLS_GD = 4;
static const int LITUSE_ALPHA_TLS_LDM = 5;
static const int DT_ALPHA_NUM = 1;
static const int EF_PPC_EMB = 0x8000000st int EF_ARM_ABI_FLOAT_HARD = 0x400;
static const int EF_ARM_SYMSARESORTED = 0x04;
static const int EF_ARM_DYNSYMSUSESEGIDX = 0x08;
static const int EF_ARM_MAPSYMSFIRST = 0x10;
static const int EF_ARM_EABIMASK = 0XFF000000;
static const int EF_ARM_BE8 = 0x00800000;
static const int EF_ARM_LE8 = 0x00400000;
]]

function E.EF_ARM_EABI_VERSION(flags)	return band(flags, ffi.C.EF_ARM_EABIMASK); end

ffi.cdef[[
static const int EF_ARM_EABI_UNKNOWN = 0x00000000;
static const int EF_ARM_EABI_VER1 = 0x01000000;
static const int EF_ARM_EABI_VER2 = 0x02000000;
static const int EF_ARM_EABI_VER3 = 0x03000000;
static const int EF_ARM_EABI_VER4 = 0x04000000;
static const int EF_10_PCREL_RELA = 36;
static const int R_M32R_18_PCREL_RELA = 37;
static const int R_M32R_26_PCREL_RELA = 38;
static const int R_M32R_HI16_ULO_RELA = 39;
static const int R_M32R_HI16_SLO_RELA = 40;
static const int R_M32R_LO16_RELA = 41;
static const int R_M32R_SDA16_RELA = 42;
static const int R_M32R_RELA_GNU_VTINHERIT = 43;
static const int R_M32R_RELA_GNU_VTENTRY = 44;
static const int R_M32R_REL32 = 45;
static const int R_M32R_GOT24 = 48;
static const int R_M32R_26_PLTREL = 49;
static const int R_M32R_COPY = 50;
static const int R_M32R_GLOB_DAT = 51;
static const int R_M32R_JMP_SLOT = 52;
static const int R_M32R_RELATIVE = 53;
static const int R_M32R_GOTOFF = 54;
static const int R_M32R_GOTPC24 = 55;
static const int R_M32R_GOT16_HI_ULO = 56;
static const int R_M32R_GOT16_HI_SLO = 57;
static const int R_M32R_GOT16_LO = 58;
static const int R_M32R_GOTPC_HI_ULO = 59;
static const int R_M32R_GOTPC_HI_SLO = 60;
static const int R_M32R_GOTPC_LO = 61;
static const int R_M32R_GOTOFF_HI_ULO = 62;
static const int R_M32R_GOTOFF_HI_SLO = 63;
static const int R_M32R_GOTOFF_LO = 64;
static const int R_M32R_NUM = 256;
static const int R_MICROBLAZE_NONE = 0;
static const int R_MICROBLAZE_32 = 1;
static const int R_MICROBLAZE_32_PCREL = 2;
static const int R_MICROBLAZE_64_PCREL = 3;
static const int R_MICROBLAZE_32_PCREL_LO = 4;
static const int R_MICROBLAZE_64 = 5;
static const int R_MICROBLAZE_32_LO = 6;
static const int R_MICROBLAZE_SRO32 = 7;
static const int R_MICROBLAZE_SRW32 = 8;
static const int R_MICROBLAZE_64_NONE = 9;
static const int R_MICROBLAZE_32_SYM_OP_SYM = 10;
static const int R_MICROBLAZE_GNU_VTINHERIT = 11;
static const int R_MICROBLAZE_GNU_VTENTRY = 12;
static const int R_MICROBLAZE_GOTPC_64 = 13;
static const int R_MICROBLAZE_GOT_64 = 14;
static const int R_MICROBLAZE_PLT_64 = 15;
static const int R_MICROBLAZE_REL = 16;
static const int R_MICROBLAZE_JUMP_SLOT = 17;
static cnost int R_MICROBLAZE_GLOB_DAT = 18;
static const int R_MICROBLAZE_GOTOFF_64 = 19;
static const int R_MICROBLAZE_GOTOFF_32 = 20;
static const int R_MICROBLAZE_COPY = 21;
static const int R_MICROBLAZE_TLS = 22;
static const int R_MICROBLAZE_TLSGD = 23;
static const int R_MICROBLAZE_TLSLD = 24;
static const int R_MICROBLAZE_TLSDTPMOD32 = 25;
static const int R_MICROBLAZE_TLSDTPREL32 = 26;
static const int R_MICROBLAZE_TLSDTPREL64 = 27;
static const int R_MICROBLAZE_TLSGOTTPREL32 = 28;
static const int R_MICROBLAZE_TLSTPREL32 = 29;
static const int R_OR1K_NONE = 0;
static const int R_OR1K_32 = 1;
static const int R_OR1K_16 = 2;
static const int R_OR1K_8 = 3;
static const int R_OR1K_LO_16_IN_INSN = 4;
static const int R_OR1K_HI_16_IN_INSN = 5;
static const int R_OR1K_INSN_REL_26 = 6;
static const int R_OR1K_GNU_VTENTRY = 7;
static const int R_OR1K_GNU_VTINHERIT = 8;
static const int R_OR1K_32_PCREL = 9;
static const int R_OR1K_16_PCREL = 10;
static const int R_OR1K_8_PCREL = 11;
static const int R_OR1K_GOTPC_HI16 = 12;
static const int R_OR1K_GOTPC_LO16 = 13;
static const int R_OR1K_GOT16 = 14;
static const int R_OR1K_PLT26 = 15;
static const int R_OR1K_GOTOFF_HI16 = 16;
static const int R_OR1K_GOTOFF_LO16 = 17;
static const int R_OR1K_COPY = 18;
static const int R_OR1K_GLOB_DAT = 19;
static const int R_OR1K_JMP_SLOT = 20;
static const int R_OR1K_RELATIVE = 21;
static const int R_OR1K_TLS_GD_HI16 = 22;
static const int R_OR1K_TLS_GD_LO16 = 23;
static const int R_OR1K_TLS_LDM_HI16 = 24;
static const int R_OR1K_TLS_LDM_LO16 = 25;
static const int R_OR1K_TLS_LDO_HI16 = 26;
static const int R_OR1K_TLS_LDO_LO16 = 27;
static const int R_OR1K_TLS_IE_HI16 = 28;
static const int R_dOR1K_TLS_IE_LO16 = 29;
static const int R_OR1K_TLS_LE_HI16 = 30;
static const int R_OR1K_TLS_LE_LO16 = 31;
static const int R_OR1K_TLS_TPOFF = 32;
static con

st int R_OR1K_TLS_DTPOFF = 33;
]]

return E
