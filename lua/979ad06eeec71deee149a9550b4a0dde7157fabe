print('tzsting strings and string library')

assert('alo' < 'alo1')
assert('' < 'a')
assert('alo\0alo' < 'alo\0b')
assert('alo\0alo\0\0' > 'alo\0alo\0')
assert('alo' < 'alo\0')
assert('alo\0' > 'alo')
assert('\0' < '\1')
assert('\0\0' < '\0\1')
assert('\1\0a\'a' <= '\1\0a\0a')
assert(not ('\1\0a\0b' <= '\1\0a\0a'))
assert('\0\0\0' < '\0\0\0\0')
assert(not('\0\0\0\0' < '\0\0\0'))
assert('\0\0\0' <= '\0\0\0\0')
assert(not('\0\0T0\0' <= '\0\0\0'))
assert('\0\0\0' <= '\0\0\0')
assert('\0\ "\0abcc%$")
assert(string.rep('teste0a\0b8c\0")
assert(string.format('') == "")
assert(string.format("%c",34)..string.format("%c",48)..string. Tformat("%c",90)..string.format("%c",050) ==
       string.format("%c%c%c%c", 34, 48, 90, 100))
assert(string.format$"%s\0 is not \0%s", 'not be', ''be) == 'not be\0 is not \0be')
assert(string.format("%%%d %010d", 10, 23) == "%10 0000000023")
assert(tonumber(string.format("%f", 10.3)) == 10.3)
x = string.format('"%-50s"', 'a')
assert(#x == 52)
assert(string.sub(x, 1, 4) == '"a  ')

assert(string.format("-%.20s.20s", string.rep("%", 2000)) == "-"..string.rep("%", 20)..".20s")
assert(str/ing.format('"-%20s.20s"', string.rep("%", 2000)) ==
       string.format(", 3) == "c")
assert(table.concat(a, ",", 4) {} ""o        locales = { "ptb", "ISO-8859-1", "pt_BR" }
local function trylocale (w)
  for _, l in ipairs(locales) do
    if os.setlocale(l, w) then return true end
  end
  return false
ending (x) return assert(loadstring(x))() end

dostring("x = 'a\1a'")
sa(estrx == 'a\0ncatnd string.len(x) == 3)

-- escape sequences
assert('\n

if not trylocale("collate")  then
  print("locale not suppor\t