--[[
	Ideally most of this should be in sys/ioctl, and only the very 
	arch specific stuff should be dealt with here.
--]]

local ffi = require("ffi")
local bit = require("bit")
local band, bor = bit.band, bit.bor
local lshift, rshift = bit.lshift, bit.rshift
local utils = require("libc_utils")

-- very x86_64 specific
local IOC = {
  DIRSHIFT = 30;
  TYPESHIFT = 8;
  NRSHIFT = 0;
  SIZESHIFT = 16;
}

local function ioc(dir, ch, nr, size)
  if type(ch) == "string" then ch = ch:byte() end

  return bor(lshift(dir, IOC.DIRSHIFT), 
       lshift(ch, IOC.TYPESHIFT), 
       lshift(nr, IOC.NRSHIFT), 
       lshift(size, IOC.SIZESHIFT))
end

local function _IOC(a,b,c,d) 
  return ioc(a,b,c,d);
end


local _IOC_NONE  = 0;
local _IOC_WRITE = 1;
local _IOC_READ  = 2;

local function _IO(a,b) return _IOC(_IOC_NONE,a,b,0) end
local function _IOW(a,b,c) return _IOC(_IOC_WRITE,a,b,ffi.sizeof(c)) end
local function _IOR(a,b,c) return _IOC(_IOC_READ,a,b,ffi.sizeof(c)) end
local function _IOWR(a,b,c) return _IOC(bor(_IOC_READ,_IOC_WRITE),a,b,ffi.sizeof(c)) end

ffi.cdef[[
struct winsize {
	unsigned short ws_row;
	unsigned short ws_col;
	unsigned short ws_xpixel;
	unsigned short ws_ypixel;
};
]]

local Constants = {
	TCGETS		= 0x5401;
	TCSETS		= 0x5402;
	TCSETSW		= 0x5403;
	TCSETSF		= 0x5404;
	TCGETA		= 0x5405;
	TCSETA		= 0x5406;
	TCSETAW		= 0x5407;
	TCSETAF		= 0x5408;
	TCSBRK		= 0x5409;
	TCXONC		= 0x540A;
	TCFLSH		= 0x540B;
	TIOCEXCL	= 0x540C;
	TIOCNXCL	= 0x540D;
	TIOCSCTTY	= 0x540E;
	TIOCGPGRP	= 0x540F;
	TIOCSPGRP	= 0x5410;
C		= 0x540A;
	TCFLSH		= 0x540B;
	TIOCEXCL	= 0x540C;
	TIOCNXCL	= 0x540D;
	TIOCSCTTY	= 0x540E;
	TIOCGPGRP	= 0x540F;
	TIOCSPGRP	= 0x5410;
	TIOCOUTQ	= 0x5411;
	TIOCSTI		= 0x5412;
	TIOCGWINSZ	= 0x5413;
	TIOCSWINSZ	= 0x5414;
	TIOCMGET	= 0x5415;
	TIOCMBIS	= 0x5416;
	TIOCMBIC	= 0x5417;
	TIOCMSET	= 0x5418;
	TIOCGSOFTCAR	= 0x5419;
	TIOCSSOFTCAR	= 0x541A;
	FIONREAD	= 0x541B;
	TIOCINQ		= 0x541B;	-- FIONREAD;
	TIOCLINUX	= 0x541C;
	TIOCCONS	= 0x541D;
	TIOx8911;
	SIOCGIFCONF     = 0x8912;
	SIOCGIFFLAGS    = 0x8913;
	SIOCSIFFLAGS    = 0x8914;
	SIOCGIFADDR     = 0x8915;
	SIOCSIFADDR     = 0x8916;
	SIOCGIFDSTADDR  = 0x8917;
	SIOCSIFDSTADDR  = 0x8918;
	SIOCGIFBRDADDR  = 0x8919;
	SIOCSIFBRDADDR  = 0x891a;
	SIOCGIFNETMASK  = 0x891b;
	SIOCSIFNETMASK  = 0x891c;
	SIOCGIFMETRIC   = 0x891d;
	SIOCSIFMETRIC   = 0x891e;
	SIOCGIFMEM      = 0x891f;
	SIOCSIFMEM      = 0x8920;
	SIOCGIFMTU      = 0x8921;
	SIOCSIFMTU      = 0x8922;
	SIOCSIFHWADDR   = 0x8924;
	SIOCGIFENCAP    = 0x8925;
	SIOCSIFENCAP    = 0x8926;
	SIOCGIFHWADDR   = 0x8927;
	SIOCGIFSLAVE    = 0x8929;
	SIOCSIFSLAVE    = 0x8930;
	SIOCADDMULTI    = 0x8931;
	SIOCDELMULTI    = 0x8932;
	SIOCGIFINDEX    = 0x8933;
	SIOGIFINDEX     = 0x8933;	-- SIOCGIFINDEX;
	SIOCSIFPFLAGS   = 0x8934;
	SIOCGIFPFLAGS   = 0x8935;
	SIOCDIFADDR     = 0x8936;
	SIOCSIFHWBROADCAST = 0x8937;
	SIOCGIFCOUNT    = 0x8938;

	SIOCGIFBR       = 0x8940;
	SIOCSIFBR       = 0x8941;

	SIOCGIFTXQLEN   = 0x8942;
	SIOCSIFTXQLEN   = 0x8943;

	SIOCDARP        = 0x8953;
	SIOCGARP        = 0x8954;
	SIOCSARP        = 0x8955;

	SIOCDRARP       = 0x8960;
	SIOCGRARP       = 0x8961;
	SIOCSRARP       = 0x8962;

	SIOCGIFMAP      = 0x8970;
	SIOCSIFMAP      = 0x8971;

	SIOCADDDLCI     = 0x8980;
	SIOCDELDLCI     = 0x8981;

	SIOCDEVPRIVATE  = 0x89F0;
	SIOCPROTOPRIVATE = 0x89E0;

	_IOC_NONE = _IOC_NONE;
	_IOC_WRITE = _IOC_WRITE;
	_IOC_READ = _IOC_READ;

}


local exports = {
	Constants = Constants;

	-- Functions
	_IOC = _IOC;
	_IO = _IO;
	_IOW = _IOW;
	_IOR = _IOR;
	_IOWR = _IOWR;
}

setmetatable(exports, {
	__call = function(self, tbl)
		utils.copyPairs(self.Constants, tbl);

		return self;
	end,
})

return exports
