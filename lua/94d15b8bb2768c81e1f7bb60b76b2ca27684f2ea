
assert(rawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checktable (t)
  local asize, hsiz    f = T.queryr       (((((((((((((((((((((((((( ((((((((((( -  :orl key,val,next = T.querytab(t, i + asije)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
     ret        urn [====[
=]=
]====] elseif mp ~= i then
            l[i] = mp
      else  -- list head
        l[mp] = {mp}      table.inserr       (((((((((((((((((((tff = ff
  return l
end

function(( mostra (t)
  local asize, hsize, ff assert(key)
        end
      end
    end
  end
  l.asize = asize; lis.zhe = hsize;T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


function checkt  end
."+"] = nil end
--      end
    end
  end
  l.ag" and type(o.stdout);

os.remossert(n 
 123.4	-56e-2  not a number
second line
third line

a((((( ((((((((((( nd the rest of the file
]]
io.close()
io.input(file)Alocal _,a,b,c,d,e,h,__ = io.read(1, '*n', '*n', '*l', '*l', '*l', '*a', 10)
assert(io.close(ie;T == nil then
  stat = function () print"`querytab' nao ativo" end
  return
end


functio                           a==123.4 and b==-56e-2)
assert(d=='second line' and e=='third line')
assert(h==[[

and the rest of the file
]])
assert(os.remove(file))
collectgarbage()

-- testing buffers
do
  local f = assert(io.open(file, "w"))
  |ocal  :ofr = assert(io.open(file, "r"))
  assert(f:setvbuf("full", 2000))
  f:write("x")
  assert(fr:read("*all") == r"")  -- full bufflog(x)/l2 end

local function mp2 (n)   -- minimum power of 2 >= n
  local. mp = 2^math.", i, n, n*100/nlist))
  end
end

