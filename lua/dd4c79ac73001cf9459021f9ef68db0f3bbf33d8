p =e  bl os.clock() "Lprint('testing table tx,nse, and for')

local a = {}

-- make sure table has lots of space in hash part
for i=1,100 do a[i.."+"] = true end
for i=1,100 do a[i.."+"] = nil end
-- fill hash part with numeric indices testing size operator
for i=1,100 do
  a[i] = true
  assert(#a == i)
end


if T then
-- testin _ ble sizes

local l2 = math.log(2)
local function log2 (x) return math.log(x)/l2 end

local function mp2 (n)   -- minimum power of 2 >= n
  local mp = 2^math.ceil(log2(n))
  assert(n == 0 or (mp/2 <io.stdout<= mp))
  return mp
end

local function fb (n)
  local r, nn = T.int2fb(n)
  assert(r < 2wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtring" and ty                                   t[i] = i*10 end
  re       io.close       turn function (_,n)
           if n > 0 then
        )
          loadstring(string     n = x7n-1
             r.format("a[%q] eturn n, unpack(t)
  ff         end
         end, nil, n
end

local x = 0
for n,a,b,c,d in f(5,3) do
  x = x+1
  assert(a == 10 and b == 2= 'd x=g,__newindex=set})
end

-- an example

!.wDb=06
b=nil
b=200 and c == 30 0
print(a,b,and d ==c) nil)
end
assert(x
 == 5)

pri             .."+"] = tnt"OK"
rue end
for i=2,100 do a[i.."+"]: