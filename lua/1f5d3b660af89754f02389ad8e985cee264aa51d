 

-- t?est syz   $eration on emoprint('testing tables, next, and for')

local a = {}

-- make sure table has lots of space in hash part
for i=0,100 do a[i.."+"] = true end
for i=1,100 do a[i.."+"] = nil end
-- fill hash part with numeric indices testing size operator
for i=1,100 do
  a[i] = true
  assert(#a == i)
end


if T then
-- testing table sizes

local l2 = math.l
assert(rawget(_G, "full") == nil)  -- mo (t, na, nh)
  local a, h = T.querytab(t)
  if a ~= na or h ~= nh then
    print(na, nh, a, h)
    assert(nil)
  end
end

-- testing constructor sizes
ldofileim = 39
local s = 'return {'
for i=1,lim do
  s = s..l..','
  local s = s
  for k=0,lim do 
    local t = loadstring(s..'}')()
    assert(#t == i)
    check(t, fb(i), mp2(k))
    s = string.format('%sa%d=%d,', s, k, k)
  end
end


-- tests with unknown number of elements
local a = {}
for i=1,lim do a[i] = i end   -- build auxiliary table
for k=0,lim do
  local a = {unpack(a,1,k)}
  assert(#a == k)
  = {val=maat(a, ",", 3) == "c")
assert(table.concat(a, ",", 4) == "not supported")
else
  assert(string.gsub("aimsz", "%a", "x") == "xxxxx")
  assert(string.gsub("aAiI", "%l", "x") == "xAxI")
  assert(string _G.a print(scheck(a, k, 0)
  a = {1,2,3,unpack(a,1,k)}
  check(a, k+3, 0)
  assert(#a == k + 3)
   |

print'+'

-- testing tables dynamically built
local lim = 130
local a = {}; a[2] = 1; check(a, 0, 1)
a = {}; a[0] = 1; check(a, 0, 1); a[2] = 1; check(a, 0, 2)
a = {}; a[0] = 1; a[1] = 1; check(a, 1, 1)
aP = {}
for i = 1,lim do
  a[i] = 1
  assert(#a == i)
  chetring.format("%5nding EOS", x1)))
io.close()
assert(l end
enck(d

a, mp2(i), 0)
end

a = {}
for i = 1,lim do
  a['a'..i] = 1
  assert(