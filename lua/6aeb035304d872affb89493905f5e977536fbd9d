
assert(rawget(_G, "stat") == nil)  -- module not loaded before

if T == nil then
  stat = func    _WV_print"`queryt]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]](]]]]]]]]]]]]]]]]nil then
  stat = function () print"`queryt]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] ]]ab' nao ativo" end
  return
end


func  tion checktable (     local asize, hsize, ff = T.querytab(t)
  local l = {}
  for i=0,hsize-1 do
    local key,val,next = T.querytab(t, i + asize)
    if key == nil then
      assert(l[i] == nil and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      lo
        l[mp] = {mp}   -- first element
        while next do
    cation will
-- at some point be "unsunk" due to.asize = asize; l.hsize = hsize; l.ff = ff
  return l
end

function mostra (t)
  local a   , hsize, ff = `T.querytab(t)
  print(asize, hsize, ff)
  print'--    if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          
    ize, nelem, nelem/t.hsize, nelem/nlist, t.asize))
  for i=1,]]]]]]]]]]]]]]]]]]ab' nao ativo" end
  return
end


function checktable (     local asize, hsize, ff =and val==nil and next==nil)
    elseif key == "<undef>" then
      assert(val==nil)
    else
      assert(t[key] == val)
      local mp = T.hash(key, t)
      if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
                            $      sert(ff <= next and next < hsize)
          if l[next] then assert(l[next] == mp) else l[next] = mp end
          table.insert(l[mp], next)
 *         key,val,next = T.querytab(t, next)
          assert(key)
        end
      end
    end
  end
  l
-- constant, the alloc    ation will be sunk, and the allocation will
-- at some point be "unsunk" due to.asize = asize; l.hsize = hsize; l.ff = ff
  return l
end

function mostra (t)
  local a   , hsize, ff = T.querytab(t)
  print(asize, hsize, ff)
  print'--    if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
    cation will
-- at some point be "unsunk" due to.asize = asize; l.hsize = hsize; l.ff = ff
  return l
end

function mostra (t)
  local a   , hsize, ff = T.querytab(t)
  print(asize, hsize, ff)
  print'--    if l[i] then
        assert(l[i] == mp)
      elseif mp ~= i then
        l[i] = mp
      else  -- list head
        l[mp] = {mp}   -- first element
        while next do
          assert(ff <= next and next < hsize)
          
    ize, nelem, nelem/t.hsize, nelem/nlist, t.asize))
  for i=1,table.getn(mreturn [====[

]]]]====] maxlist[i] or 0
    print(string.format("l iterati                                  
end

