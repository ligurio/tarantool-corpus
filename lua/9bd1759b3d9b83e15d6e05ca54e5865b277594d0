--[[
    This file is the result of some processing through
    testy/elfmorph.lua

    primarily to get the #defines related to constants
    turning into static const int
--]]

local ffi = require("ffi")
local bit = require("bit")
local band, lshift, rshift = bit.band, bit.lshift, bit.rshift

local E = {}  -- things to be exported

ffi.cdef[[
typedef uint16_t Elf32_Half;
typedef uint16_t Elf64_Half;
typedef uint32_t Elf32_Word;
typedef	int32_t  Elf32_Sword;
typedef uint32_t Elf64_Word;
typedef	int32_t  Elf64_Sword;
typedef uint64_t Elf32_Xword;
typedef	int64_t  Elf32_Sxword;
typedef uint64_t Elf64_Xword;
typedef	int64_t  Elf64_Sxword;
typedef uint32_t Elf32_Addr;
typedef uint64_t Elf64_Addr;
typedef uint32_t Elf32_Off;
typedef uint64_t Elf64_Off;
typedef uint16_t Elf32_Section;
typedef uint16_t Elf64_Section;
typedef Elf32_Half Elf32_Versym;
typedef Elf64_Half Elf64_Versym;
]]
ffi.cdef[[
static const int EI_NIDENT = 16;
]]
ffi.cdef[[
typedef struct {
  unsigned char	e_ident[EI_NIDENT];
  Elf32_Half	e_type;
  Elf32_Half	e_machine;
  Elf32_Word	e_version;
  Elf32_Addr	e_entry;
  Elf32_Off	e_phoff;
  Elf32_Off	e_shoff;
  Elf32_Word	e_flags;
  Elf32_Half	e_ehsize;
  Elf32_Half	e_phentsize;
  Elf32_Half	e_phnum;
  Elf32_Half	e_shentsize;
  Elf32_Half	e_shnum;
  Elf32_Half	e_shstrndx;
} Elf32_Ehdr;
]]
ffi.cdef[[
typedef struct {
  unsigned char	e_ident[EI_NIDENT];
  Elf64_Half	e_type;
  Elf64_Half	e_machine;
  Elf64_Word	e_version;
  Elf64_Addr	e_entry;
  Elf64_Off	e_phoff;
  Elf64_Off	e_shoff;
  Elf64_Word	e_flags;
  Elf64_Half	e_ehsize;
  Elf64_Half	e_phentsize;
  Elf64_Half	e_phnum;
  Elf64_Half	e_shentsize;
  Elf64_Half	e_shnum;
  Elf64_Half	e_shstrndx;
} Elf64_Ehdr;
]]

ffi.cdef[[
static const int EI_MAG0 = 0;
static const int ELFMAG0 = 0x7f;
static const int EI_MAG1 = 1;
static const int ELFMAG1 = 'E';
static const int EI_MAG2 = 2;
static const int ELFMAG2 = 'L';
static const int EI_MAG3 = 3;
static const int ELFMAG3 = 'F';
]]

E.ELFMAG		="\177ELF";

ffi.cdef[[
static const int SELFMAG = 4;
static const int EI_CLASS = 4;
static const int ELFCLASSNONE = 0;
static const int ELFCLASS32 = 1;
static const int ELFCLASS64 = 2;
static const int ELFCLASSNUM = 3;
static const int EI_DATA = 5;
static const int ELFDATANONE = 0;
static const int ELFDATA2LSB = 1;
static const int ELFDATA2MSB = 2;
static const int ELFDATANUM = 3;
static const int EI_VERSION = 6;
static const int EI_OSABI = 7;
static const int ELFOSABI_NONE = 0;
static const int ELFOSABI_SYSV = 0;
static const int ELFOSABI_HPUX = 1;
static const int ELFOSABI_NETBSD = 2;
static const int ELFOSABI_LINUX = 3;
static const int ELFOSABI_GNU = 3;
static const int ELFOSABI_SOLARIS = 6;
static const int ELFOSABI_AIX = 7;
static const int ELFOSABI_IRIX = 8;
static const int ELFOSABI_FREEBSD = 9;
static const int ELFOSABI_TRU64 = 10;
static const int ELFOSABI_MODESTO = 11;
static const int ELFOSABI_OPENBSD = 12;
static const int ELFOSABI_ARM = 97;
static const int ELFOSABI_STANDALONE = 255;
static const int EI_ABIVERSION = 8;
static const int EI_PAD = 9;
static const int ET_NONE = 0;
static const int ET_REL = 1;
static const int ET_EXEC = 2;
sta                                  tic const int ET_DYN = 3;
static const int ET_CORE = 4;
static const int ET_NUM = 5;
static const int ET_LOOS = 0xfe00;
static const int ET_HIOS = 0xfeff;
static const int ET_LOPROC = 0xff00;
static const int ET_HIPROC = 0xffff;
static const int EM_NONE = 0;
static const int EM_M32 = 1;
static const int EM_SPARC = 2;
static const int EM_386 = 3;
static const int EM_68K = 4;
static const int EM_88K = 5;
static const int EM_860 = 7;
static const int EM_MIPS = 8;
static const int EM_S370 = 9;
static const int EM_MIPS_RS3_LE = 10;
static const int EM_PARISC = 15;
static const int EM_VPP500 = 17;
static const int EM_SPARC32PLUS = 18;
static const int EM_960 = 19;
static const int EM_PPC = 20;
static const int EM_PPC64 = 21;
static const int EM_S390 = 22;
static const int EM_V800 = 36;
static const  int STT_NOTYPE = 0;
static const int STT_OBJECT = 1;
static const int STT_FUNC = 2;
static const int STT_SECTION = 3;
static const int STT_FILE = 4;
static const int STT_COMMON = 5;
static const int STT_TLS = 6;
static const int STT_NUM = 7;
static const int STT_LOOS = 10;
static const int STT_GNU_IFUNC = 10;
static const int STT_HIOS = 12;
static const int STT_LOPROC = 13;
static const int STT_HIPROC = 15;
static const int STN_UNDEF = 0;
]]

function E.ELF32_ST_VISIBILITY(o)	return band(o, 0x03); end
function E.ELF64_ST_VISIBILITY(o)	return E.ELF32_ST_VISIBILITY (o); end

ffi.cdef[[
static const int STV_DEFAULT = 0;
static const int STV_INTERNAL = 1;
static const int STV_HIDDEN = 2;
static const int STV_PROTECTED = 3;
]]

ffi.cdef[[
typedef struct
{
  Elf32_Addr	r_offset;
  Elf32_Word	r_info;
} Elf32_Rel;
typedef struct {
  Elf64_Addr	r_offset;
  Elf64_Xword	r_info;
} Elf64_Rel;
typedef struct {
  Elf32_Addr	r_offset;
  Elf32_Word	r_info;
  Elf32_Sword	r_addend;
} Elf32_Rela;
typedef struct {
  Elf64_Addr	r_offset;
  Elf64_Xword	r_info;
  Elf64_Sxword	r_addend;
} Elf64_Rela;
]]


function E.ELF32_R_SYM(val)		return rshift((val), 8) end
function E.ELF32_R_TYPE(val)	return band(val, 0xff) end
function E.ELF32_R_INFO(sym, atype)		return lshift(sym, 8) + band(atype, 0xff) end
function E.ELF64_R_SYM(i)			return rshift(i, 32) end
function E.ELF64_R_TYPE(i)			return band(i, 0xffffffff) end
function E.ELF64_R_INFO(sym,atype)		return lshift(ffi.cast("Elf64_Xword", sym), 32) + atype end

ffi.cdef[[
typedef struct {
  Elf32_Word	p_type;
  Elf32_Off	p_offset;
  Elf32_Addr	p_vaddr;
  Elf32_Addr	p_paddr;
  Elf32_Word	p_filesz;
  Elf32_Word	p_memsz;
  Elf32_Word	p_flags;
  Elf32_Word	p_align;
} Elf32_Phdr;
typedef struct {
  Elf64_Word	p_type;
  Elf64_Word	p_flags;
  Elf64_Off	p_offset;
  Elf64_Addr	p_vaddr;
  Elf64_Addr	p_paddr;
  Elf64_Xword	p_filesz;
  Elf64_Xword	p_memsz;
  Elf64_Xword	p_align;
} Elf64_Phdr;
]]

ffi.cdef[[
static const int PT_NULL = 0;
static const int PT_LOAD = 1;
static const int PT_DYNAMIC = 2;
static const int PT_INTERP = 3;
static const int PT_NOTE = 4;
static const int PT_SHLIB = 5;
static const int PT_PHDR = 6;
static const int PT_TLS = 7;
static const int PT_NUM = 8;
static const int PT_LOOS = 0x60000000;
static const int PT_GNU_EH_FRAME = 0x6474e550;
static const int PT_GNU_STACK = 0x6474e551;
static const int PT_GNU_RELRO = 0x6474e552;
static const int PT_LOSUNW = 0x6ffffffa;
static const int PT_SUNWBSS = 0x6ffffffa;
static const int PT_SUNWSTACK = 0x6ffffffb;
static const int PT_HISUNW = 0x6fffffff;
static const int PT_HIOS = 0x6fffffff;
static const int PT_LOPROC = 0x70000000;
static const int PT_HIPROC = 0x7fffffff;
static const int PN_XNUM = 0xffff;
static const int PF_MASKOS = 0x0ff00000;
static const int PF_MASKPROC = 0xf0000000;
static const int NT_PRSTATUS = 1;
static const int NT_FPREGSET = 2;
static const int NT_PRPSINFO = 3;
static const int NT_PRXREG = 4;
static const int NT_TASKSTRUCT = 4;
static const int NT_PLATFORM = 5;
static const int NT_AUXV = 6;
static const int NT_GWINDOWS = 7;
static const int NT_ASRS = 8;
static const int NT_PSTATUS = 10;
static const int NT_PSINFO = 13;
static const int NT_PRCRED = 14;
static const int NT_UTSNAME = 15;
static const int NT_LWPSTATUS = 16;
static const int NT_LWPSINFO = 17;
static const int NT_PRFPXREG = 20;
static const int NT_SIGINFO = 0x53494749;
static const int NT_FILE = 0x46494c45;
static const int NT_PRXFPREG = 0x46e62b7f;
static const int NT_PPC_VMX = 0x100;
static const int NT_PPC_SPE = 0x101;
static const int NT_PPC_VSX = 0x102;
static const int NT_386_TLS = 0x200;
static const int NT_386_IOPERM = 0x201;
static const int NT_X86_XSTATE = 0x202;
static const int NT_S390_HIGH_GPRS = 0x300;
static const int NT_S390_TIMER = 0x301;
static const int NT_S390_TODCMP = 0x302;
static const int NT_S390_TODPREG = 0x303;
static const int NT_S390_CTRS = 0x304;
static const int NT_S390_PREFIX = 0x305;
static const int NT_S390_LAST_BREAK = 0x306;
static const int NT_S390_SYSTEM_CALL = 0x307;
static const int NT_S390_TDB = 0x308;
static const int NT_ARM_VFP = 0x400;
static const int NT_ARM_TLS = 0x401;
static const int NT_ARM_HW_BREAK = 0x402;
static const int NT_ARM_HW_WATCH = 0x403;
static const int NT_METAG_CBUF = 0x500;
static const int NT_METAG_RPIPE = 0x501;
static const int NT_METAG_TLS = 0x502;
]]

ffi.cdef[[
typedef struct {
  Elf32_Sword d_tag;
  union {
      Elf32_Word d_val;
      Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;
typedef struct {
  Elf64_Sxword d_tag;
  union {
      Elf64_Xword d_val;
      Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
]]

ffi.cdef[[
static const int DT_MIPS_NUM = 0x35;
]]

ffi.cdef[[
static const int DT_NULL = 0;
static const int DT_NEEDED = 1;
stR_SH_DATA = 31;
static const int R_SH_LABEL = 32;
static const int R_print('testing tables, next, and for')

local a = {}

-- make sure table has lots of space in hash part
for i=1,100 do a[i.."+"] = true end
for i=1,100 do a[i.."+"] = nil end
-- fill hash part with numeric indices testing size operator
for i=1,100 do
  a[i] = true
  assert(#a == i)
end


if T then
-- testing table sizes

local l2 = math.log(2)
local function log2 (x) return math.log(x)/l2 end

local function mp2 (n)   -- minimum power of 2 >= n
  local mp = 2^math.ceil(log2(n))
  assert(n == 0 or (mp/2 < n and n <= mp))
  return mp
end

local function fb (n)
  local r, nn = T.int2fb(n)
  assert(r < 256)
  return nn
end

-- test fb function
local a = 1
local lim = 2^30
while a < lim do
  local n = fb(a)
  assert(a <= n and n <= a*1.125)
  a = math.ceil(a*1.3)
end

 
local function check (t, na, nh)
  local a, h = T.querytab(t)
  if a ~= na or h ~= nh then
    print(na, nh, a, h)
    assert(nil)
  end
end

-- testing constructor sizes
local lim = 40
local s = 'return {'
for i=1,lim do
  s = s..i..','
  local s = s
  for k=0,lim do 
    local t = loadstring(s..'}')()
    assert(#t == i)
    check(t, fb(i), mp2(k))
    s = string.format('%sa%d=%d,', s, k, k)
  end
end


-- tests w(foo) == n)
  assert(print == nil and gl1 == 3)
  gl1 = nil
  gl = 1
  assert(n.gl == 1 and next(n, 'gl') == nil)
end
foo()

print'+'

local function checknext (a)
  local b = {}
  table.foreach(a, function (k,v) b[k] = v end)
  for k,v in pairs(b) do assert(a[k] == v) end
  for k,v in pairs(a) do assert(b[k] == v) end
  b = {}
  do local k,v = next(a); while k do b[k] = v; k,v = next(a,k) end end
  for k,v in pairs(b) do assert(a[k] == v) end
  for k,v in pairs(a) do assert(b[k] == v) end
end

checknext{1,x=1,y=2,z=3}
checknext{1,2,x=1,y=2,z=3}
checknext{1,2,3,x=1,y=2,z=3}
checknext{1,2,3,4,x=1,y=2,z=3}
checknext{1,2,3,4,5,x=1,y=2,z=3}

assert(table.getn{} == 0)
assert(table.getn{[-1] = 2} == 0)
assert(table.getn{1,2,3,nil,nil} == 3)
for i=0,40 do
  local a = {}
  for j=1,i do a[j]=j end
  assert(table.getn(a) == i)
end


assert(table.maxn{} == 0)
assert(table.maxn{["1000"] = true} == 0)
assert(table.maxn{["1000"] = true, [24.5] = 3} == 24.5)
assert(table.maxn{[1000] = true} == 1000)
assert(table.maxn{[10] = true, [100*math.pi] = print} == 100*math.pi)


-- int overflow
a = {}
for i=0,50 do a[math.pow(2,i)] = true end
assert(a[table.getn(a)])

print("+")


-- erasing values
loca-- test_syscall.lua
-- References
--	ld-linux.so
--  getauxval
local init = require("test_setup")()
local auxv_util = require("auxv_iter")
local apairs = auxv_util.keyvaluepairs;
local keynames = auxv_util.keynames;
local auxvGetOne = auxv_util.getOne;


--auxv_uSH_SWITCH8 = 33;
static const int R_SH_GNU_VTINHERIT = 34;
static const int R_SH_GNU_VTENTRY = 35;
static const int R_SH_TLS_GD_32 = 144;
static const int R_SH_TLS_LD_32 = 145;
static const int R_SH_TLS_LDO_32 = 146;
static const int R_SH_TLS_IE_32 = 147;
static const int R_SH_TLS_LE_32 = 148;
static const int R_SH_TLS_DTPMOD32 = 149;
static const int R_SH_TLS_DTPOFF32 = 150;
static const int R_SH_TLS_TPOFF32 = 151;
static const int R_SH_GOT32 = 160;
static const int R_SH_PLT32 = 161;
statitil.gencc const int R_SH_COPY = 162;
static const int R_SH_GLOB_DAT = 163;
static const int R_SH_JMP_SLOT = 164;
static const int R_SH_RELATIVE = 165;
static const int R_SH_GOTOFF = 166;
static const int R_SH_GOTPC = 167;
static const int R_SH_NUM = 256;
static const int R_390_NONE = 0;
static const int R_390_8 = 1;
static const int R_390_12 = 2;
static const int R_390_16 = 3;
static const int R_390_32 = 4;
static const int R_390_PC32 = 5;
static const int R_390_GOT12 = 6;
static const int R_390_GOT32 = 7;
static const int R_390_PLT32 = 8;
static const int R_390_COPY = 9;
static const int R_390_GLOB_DAT = 10;
static const int R_390_JMP_SLOT = 11;
static const int R_390_RELATIVE = 12;
static const int R_390_GOTOFF32 = 13;
static const int R_390_GOTPC = 14;
static const int R_390_GOT16 = 15;
static const int R_390_PC16 = 16;
static const int R_390_PC16DBL = 17;
static const int R_390_PLT16DBL = 18;
static const int R_390_PC32DBL = 19;
static const int R_390_PLT32DBL = 20;
static const int R_390_GOTPCDBL = 21;
static const int R_390_64 = 22;
static const int R_390_PC64 = 23;
static const int R_390_GOT64 = 24;
static const int R_390_PLT64 = 25;
static const int R_390_GOTENT = 26;
static const int R_390_GOTOFF16 = 27;
static const int R_390_GOTOFF64 = 28;
static const int R_390_GOTPLT12 = 29;
static const int R_390_GOTPLT16 = 30;
static const int R_390_GOTPLT32 = 31;
static const int R_390_GOTPLT64 = 32;
static const int R_390_GOTPLTENT = 33;
static const int R_390_PLTOFF16 = 34;
static const int R_390_PLTOFF32 = 35;
static const int R_390_PLTOFF64 = 36;
static const int R_390_TLS_LOAD = 37;
static const int R_390_TLS_GDCALL = 38;
static const int R_390_TLS_LDCALL = 39;
static const int R_390_TLS_GD32 = 40;
static const int R_390_TLS_GD64 = 41;
statdefs();
print("ic const int R_390_TLS_GOTIE12 = 42;
static const int R_390_TLS_GOTIE32 = 43;
static const int R_390_TLS_GOTIE64 = 44;
static const int R_390_TLS_LDM32 = 45;
static==== Iterate All ====")
local function printAll()
	for _, key, value in apairs(path) do
		io.write(string.format("%20s[%2d] : ", keynames[key], key))
		print(value);
	end
end

-- print all the entries
printAll();

--                                                           try to get a speci__divne
print("==== Get Singles ====")
print(" Platform: ", auxvGetOne(auxv_util.AT_PLATFORM))
print ("Pagcoe